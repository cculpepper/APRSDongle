# FreeScale Cortex-M0plus with 32kB Flash and 4kB Local On-Chip SRAM,
# Nemuisan's Special MKL05Z32VFM4


# KL05Z chips support only SWD transports.
# Adapt based on what transport is active.
source [find target/swj-dp.tcl]

# Define Chip Information
if { [info exists CHIPNAME] == 0 } {
   set _CHIPNAME kl05z
}

if { [info exists CPUTAPID] == 0 } {
   # this is the sw-dp id not the jtag tap id
   set _CPUTAPID 0x0BC11477
}

# Work-area is a space in RAM used for flash programming
# By default use 4kB
if { [info exists WORKAREASIZE] == 0 } {
   set _WORKAREASIZE 0x1000
}

# Select "none"
reset_config srst_only
#reset_config none

swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -chain-position $_TARGETNAME

# It is important that "kinetis mdm check_security" is called for
# 'examine-end' event and not 'eximine-start'. Calling it in 'examine-start'
# causes "kinetis mdm check_security" to fail the first time openocd
# calls it when it tries to connect after the CPU has been power-cycled.
$_CHIPNAME.cpu configure -event examine-end {
	kinetis mdm check_security
# Uncomment when gone into s*ck'n secured state!
	kinetis mdm mass_erase #here
}

# KL05Z has 4kB of SRAM In the ARMv6-M "Code" area (at 0x1FFFFC00)
$_TARGETNAME configure -work-area-phys 0x1FFFFC00 -work-area-size $_WORKAREASIZE -work-area-backup 0 -rtos auto

# MKL05Z32VFM4 has 32kB of flash memory.
set _FLASHNAME pflash
flash bank $_FLASHNAME kinetis 0x00000000 0x8000 0 4 $_TARGETNAME



proc mt_internal_rc {} {
	echo "Rize up to Internal PLLed Clock!"
	# Disable HWWDT
    #mww 0x40048100	0x00000000
	# SIM->CLKDIV1 = (uint32_t)0x00020000UL; /* Update system prescalers */
	mww	0x40048044	0x00020000

	# /* Switch to FEI Mode */
	# MCG->C1 = (uint8_t)0x06U;
	mwb 0x40064000	0x06
	# MCG->C2 = (uint8_t)0x00U;
	mwb 0x40064001	0x00
	# /* MCG->C4: DMX32=0,DRST_DRS=1 */
	# MCG->C4 = (uint8_t)((MCG->C4 & (uint8_t)~(uint8_t)0xC0U) | (uint8_t)0x20U);
	mwb 0x40064003	0x37
	#OSC0->CR = (uint8_t)0x80U;
	mwb 0x40065000	0x80
	# MCG->C5 = (uint8_t)0x00U;
	mwb 0x40064004	0x00
	# MCG->C6 = (uint8_t)0x00U;
	mwb 0x40064005	0x00
	sleep 100
}


proc mt_flash {IMGFILE} {
	mt_internal_rc
	flash write_image erase $IMGFILE
	verify_image $IMGFILE
	reset run
	shutdown
}

proc mt_flash_bin {IMGFILE OFFSET} {
	mt_internal_rc
	flash write_image erase $IMGFILE $OFFSET bin
	verify_image $IMGFILE $OFFSET bin
	reset run
	shutdown
}

proc mt_flash_hex {IMGFILE} {
	mt_internal_rc
	flash write_image erase $IMGFILE 0 ihex
	verify_image $IMGFILE
	reset run
	shutdown
}

proc mt_flash_srec {IMGFILE} {
	mt_internal_rc
	flash write_image erase $IMGFILE 0 s19
	verify_image $IMGFILE
	reset run
	shutdown
}

proc mass_erase {} {
	kinetis mdm mass_erase
}

proc eraser {} {
# Verbose procedure confirmed erase routine
	flash info 0
# CAUTION! "flash erase_sector 0 0 last" goes into secure state!!!
# USE "mass_erase" command instead of
#	flash erase_sector 0 0 last
	mass_erase
	shutdown
}


#debug_level 3
# HLA doesn't have cortex_m commands 
if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}
adapter_khz 10
gdb_target_description enable
init
#kinetis mdm mass_erase
reset init
