


ARM Macro Assembler    Page 1 CMPE 250 Lab Exercise Eleven


    1 00000000                 TTL              CMPE 250 Lab Exercise Eleven
    2 00000000         ;*******************************************************
                       *********
    3 00000000         ; Tests mixed C and assembly language programming to add
                        128-bit
    4 00000000         ; unsigned numbers.  Prompts user to enter two numbers i
                       n hex
    5 00000000         ; format to add, computes the result, and prints it.
    6 00000000         ;Name:  R. W. Melton
    7 00000000         ;Date:  April 20, 2015
    8 00000000         ;Class:  CMPE-250
    9 00000000         ;Section:  All sections
   10 00000000         ;-------------------------------------------------------
                       --------
   11 00000000         ;Keil Template for KL46
   12 00000000         ;R. W. Melton
   13 00000000         ;February 16, 2015
   14 00000000         ;*******************************************************
                       *********
   15 00000000         ;Assembler directives
   16 00000000                 THUMB
   17 00000000         ;-------------------------------------------------------
                       --------
   18 00000000                 GBLL             MIXED_ASM_C
   19 00000000 TRUE     
                       MIXED_ASM_C
                               SETL             {TRUE}
   20 00000000         ;-------------------------------------------------------
                       --------
   22 00000000         ;*******************************************************
                       *********
   23 00000000         ;Include files
   24 00000000         ;include MKL05Z4.h;
   26 00000000         ;*******************************************************
                       *********
   27 00000000         ;EQUates
   28 00000000 0000004F 
                       MAX_STRING
                               EQU              79
   29 00000000         ;Characters
   30 00000000 00000008 
                       BS      EQU              0x08
   31 00000000 0000000D 
                       CR      EQU              0x0D
   32 00000000 0000000A 
                       LF      EQU              0x0A
   33 00000000 00000000 
                       NULL    EQU              0x00
   34 00000000         ;-------------------------------------------------------
                       --------
   35 00000000         ; Queue management record field offsets
   36 00000000 00000000 
                       IN_PTR  EQU              0
   37 00000000 00000004 
                       OUT_PTR EQU              4
   38 00000000 00000008 
                       BUF_STRT
                               EQU              8
   39 00000000 0000000C 



ARM Macro Assembler    Page 2 CMPE 250 Lab Exercise Eleven


                       BUF_PAST
                               EQU              12
   40 00000000 00000010 
                       BUF_SIZE
                               EQU              16
   41 00000000 00000011 
                       NUM_ENQD
                               EQU              17
   42 00000000         ; Queue structure sizes
   43 00000000 00000004 
                       Q_BUF_SZ
                               EQU              4           ;Queue contents
   44 00000000 00000050 
                       XQ_BUF_SZ
                               EQU              80          ;Xmit queue content
                                                            s
   45 00000000 00000012 
                       Q_REC_SZ
                               EQU              18          ;Queue management r
                                                            ecord
   46 00000000         ; Queue delimiters for printed output
   47 00000000 0000003E 
                       Q_BEGIN_CH
                               EQU              '>'
   48 00000000 0000003C 
                       Q_END_CH
                               EQU              '<'
   49 00000000         ;-------------------------------------------------------
                       --------
   50 00000000         ;PORTx_PCRn (Port x pin control register n [for pin n])
   51 00000000         ;___->10-08:Pin mux control (select 0 to 8)
   52 00000000 00000300 
                       PORT_PCR_PIN_MUX_SELECT_3
                               EQU              0x00000300
   53 00000000         ;-------------------------------------------------------
                       --------
   54 00000000         ;Port E
   55 00000000         PORT_PCR_PTE0_MUX_UART0_TX
                               EQU              PORT_PCR_MUX_SELECT_3_MASK
   56 00000000         PORT_PCR_PTE1_MUX_UART0_RX
                               EQU              PORT_PCR_MUX_SELECT_3_MASK
   58 00000000         PORT_PCR_SET_PTE0_UART0_TX
                               EQU              (PORT_PCR_ISF_MASK :OR: PORT_PC
R_PTE0_MUX_UART0_TX)
   60 00000000         PORT_PCR_SET_PTE1_UART0_RX
                               EQU              (PORT_PCR_ISF_MASK :OR: PORT_PC
R_PTE1_MUX_UART0_RX)
   61 00000000         ;-------------------------------------------------------
                       --------
   62 00000000         ;SIM_SCGC4
   63 00000000         ;1->11:UART0 clock gate control (enabled)
   64 00000000         SIM_SCGC4_UART0CGC_MASK
                               EQU              SIM_SCGC4_UART0_MASK
   65 00000000         ;-------------------------------------------------------
                       --------
   66 00000000         ;SIM_SCGC5
   67 00000000         ;1->   13:Port E clock gate control (enabled)
   68 00000000         SIM_SCGC5_PORTECGC_MASK
                               EQU              SIM_SCGC5_PORTE_MASK



ARM Macro Assembler    Page 3 CMPE 250 Lab Exercise Eleven


   69 00000000         ;-------------------------------------------------------
                       --------
   70 00000000         ;SIM_SOPT5
   71 00000000         ; 0->   17:UART0 open drain enable (disabled)
   72 00000000         ; 0->   06:UART0 receive data select (UART0_RX)
   73 00000000         ;00->05-04:UART0 transmit data select source (UART0_TX)
   75 00000000         SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
                               EQU              (SIM_SOPT5_UART0ODE_MASK      
:OR: SIM_SOPT5_UART0RXSRC_MASK :OR: SIM_SOPT5_UART0TXSRC_MASK)
   76 00000000         ;-------------------------------------------------------
                       --------
   77 00000000         ;UARTx_BDH
   78 00000000         ;    0->  7:LIN break detect IE (disabled)
   79 00000000         ;    0->  6:RxD input active edge IE (disabled)
   80 00000000         ;    0->  5:Stop bit number select (1)
   81 00000000         ;00000->4-0:SBR[12:0] (BUSCLK / (16 x 9600))
   82 00000000         ;BUSCLK = CORECLK / 2 = PLLCLK / 4
   83 00000000         ;PLLCLK is 96 MHz
   84 00000000         ;BUSCLK is 24 MHz
   85 00000000         ;SBR = 24 MHz / (16 x 9600) = 156.25 --> 156 = 0x009C
   86 00000000 00000000 
                       UART_BDH_9600
                               EQU              0
   87 00000000         ;-------------------------------------------------------
                       --------
   88 00000000         ;UARTx_BDL
   89 00000000         ;26->7-0:SBR[7:0] (BUSCLK / 16 x 9600))
   90 00000000         ;BUSCLK = CORECLK / 2 = PLLCLK / 4
   91 00000000         ;PLLCLK is 96 MHz
   92 00000000         ;BUSCLK is 24 MHz
   93 00000000         ;SBR = 24 MHz / (16 x 9600) = 156.25 --> 0x9C
   94 00000000 0000009C 
                       UART_BDL_9600
                               EQU              156
   95 00000000 00000027 
                       UART_BDL_38400
                               EQU              39
   96 00000000         ;-------------------------------------------------------
                       --------
   97 00000000         ;UARTx_C1
   98 00000000         ;0-->7:LOOPS=loops select (normal)
   99 00000000         ;0-->6:UARTSWAI=UART stop in wait mode (disabled)
  100 00000000         ;0-->5:RSRC=receiver source select (internal--no effect 
                       LOOPS=0)
  101 00000000         ;0-->4:M=9- or 8-bit mode select (1 start, 8 data [lsb f
                       irst], 1 stop)
  102 00000000         ;0-->3:WAKE=receiver wakeup method select (idle)
  103 00000000         ;0-->2:IDLE=idle line type select (idle begins after sta
                       rt bit)
  104 00000000         ;0-->1:PE=parity enable (disabled)
  105 00000000         ;0-->0:PT=parity type (even parity--no effect PE=0)
  106 00000000 00000000 
                       UART_C1_8N1
                               EQU              0x00
  107 00000000         ;-------------------------------------------------------
                       --------
  108 00000000         ;UARTx_C2
  109 00000000         ;0-->7:TIE=transmit IE for TDRE (disabled)
  110 00000000         ;0-->6:TCIE=trasmission complete IE for TC (disabled)



ARM Macro Assembler    Page 4 CMPE 250 Lab Exercise Eleven


  111 00000000         ;0-->5:RIE=receiver IE for RDRF (disabled)
  112 00000000         ;0-->4:ILIE=idle line IE for IDLE (disabled)
  113 00000000         ;1-->3:TE=transmitter enable (enabled)
  114 00000000         ;1-->2:RE=receiver enable (enabled)
  115 00000000         ;0-->1:RWU=receiver wakeup control (normal)
  116 00000000         ;0-->0:SBK=send break (disabled, normal)
  117 00000000         UART_C2_T_R
                               EQU              (UART_C2_TE_MASK :OR: UART_C2_R
E_MASK)
  118 00000000         UART_C2_T_RI
                               EQU              (UART_C2_RIE_MASK :OR: UART_C2_
T_R)
  119 00000000         UART_C2_TI_RI
                               EQU              (UART_C2_TIE_MASK :OR: UART_C2_
T_RI)
  120 00000000         ;-------------------------------------------------------
                       --------
  121 00000000         ;UARTx_C3
  122 00000000         ;0-->7:R8=9th data bit for receiver (not used M=0)
  123 00000000         ;0-->6:T8=9th data bit for transmitter (not used M=0)
  124 00000000         ;0-->5:TXDIR=TxD pin direction in single-wire mode (no e
                       ffect LOOPS=0)
  125 00000000         ;0-->4:TXINV=transmit data inversion (not invereted)
  126 00000000         ;0-->3:ORIE=overrun IE for OR (disabled)
  127 00000000         ;0-->2:NEIE=noise error IE for NF (disabled)
  128 00000000         ;0-->1:FEIE=framing error IE for FE (disabled)
  129 00000000         ;0-->0:PEIE=parity error IE for PF (disabled)
  130 00000000 00000000 
                       UART_C3_NO_TXINV
                               EQU              0x00
  131 00000000         ;-------------------------------------------------------
                       --------
  132 00000000         ;UARTx_C4
  133 00000000         ;0-->  7:TDMAS=transmitter DMA select (disabled)
  134 00000000         ;0-->  6:Reserved; read-only; always 0
  135 00000000         ;0-->  5:RDMAS=receiver full DMA select (disabled)
  136 00000000         ;0-->  4:Reserved; read-only; always 0
  137 00000000         ;0-->  3:Reserved; read-only; always 0
  138 00000000         ;0-->2-0:Reserved; read-only; always 0
  139 00000000 00000000 
                       UART_C4_NO_DMA
                               EQU              0x00
  140 00000000         ;-------------------------------------------------------
                       --------
  141 00000000         ;UARTx_S2
  142 00000000         ;0-->7:LBKDIF=LIN break detect interrupt flag
  143 00000000         ;0-->6:RXEDGIF=RxD pin active edge interrupt flag
  144 00000000         ;0-->5:(reserved);read-only; always 0
  145 00000000         ;0-->4:RXINV=receive data inversion (disabled)
  146 00000000         ;0-->3:RWUID=receive wake-up idle detect
  147 00000000         ;0-->2:BRK13=break character generation length (10)
  148 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
  149 00000000         ;0-->0:RAF=receiver active flag
  150 00000000 00000000 
                       UART_S2_NO_RXINV_BRK10_NO_LBKDETECT
                               EQU              0x00
  151 00000000         ;-------------------------------------------------------
                       --------
  152 00000000 00000003 



ARM Macro Assembler    Page 5 CMPE 250 Lab Exercise Eleven


                       UART0_IRQ_PRI
                               EQU              3           ;lowest priority
  153 00000000         ;*******************************************************
                       *********
  154 00000000         ; Macros
  155 00000000                 MACRO
  156 00000000                 MOVC             $Value
  157 00000000         ;--------------------------
  158 00000000         ;Puts $Value in C bit of PSR
  159 00000000                 PUSH             {R0}
  160 00000000                 MOVS             R0,$Value
  161 00000000                 LSRS             R0,R0,#1
  162 00000000                 POP              {R0}
  163 00000000         ;--------------------------
  164 00000000                 MEND
  165 00000000         ;*******************************************************
                       *********
  166 00000000         ;Program
  167 00000000         ;Linker requires Reset_Handler
  168 00000000                 AREA             MyCode,CODE,READONLY
  169 00000000         ;>>>>> begin subroutine code <<<<<
  170 00000000         ;-------------------------------------------------------
                       --------
  171 00000000                 EXPORT           AddIntMultiU
  172 00000000         AddIntMultiU
  173 00000000         ;*******************************************************
                       ***************
  174 00000000         ;Adds two 128-bit unsigned numbers:  Sum = Augend + Adde
                       nd
  175 00000000         ;If result overflows, returns 1; otherwie returns 0.
  176 00000000         ;Input:   R0: Address of Sum
  177 00000000         ;         R1: Address of Augend
  178 00000000         ;         R2: Address of Addend
  179 00000000         ;         R3: Number of words in each number
  180 00000000         ;Output:  R0: Error result
  181 00000000         ;Modify:  R0, PSR
  182 00000000         ;Usage:   R4: Auguend word; Sum word
  183 00000000         ;         R5: Addend word
  184 00000000         ;         R6: Temp
  185 00000000         ;*******************************************************
                       ***************
  186 00000000         ;Save registers
  187 00000000 B47E            PUSH             {R1-R6}     ;save used register
                                                            s
  188 00000002                 MOVC             #0          ;clear initial carr
                                                            y
  157 00000002         ;--------------------------
  158 00000002         ;Puts $Value in C bit of PSR
  159 00000002 B401            PUSH             {R0}
  160 00000004 2000            MOVS             R0,#0
  161 00000006 0840            LSRS             R0,R0,#1
  162 00000008 BC01            POP              {R0}
  163 0000000A         ;--------------------------
  189 0000000A F3EF 8600       MRS              R6,APSR     ;preserve condition
                                                             flags
  190 0000000E         AddIntMultiULoop                     ;do {
  191 0000000E F386 8800       MSR              APSR,R6     ;  restore conditio
                                                            n flags
  192 00000012 C910            LDM              R1!,{R4}    ;  get next augend 



ARM Macro Assembler    Page 6 CMPE 250 Lab Exercise Eleven


                                                            word
  193 00000014 CA20            LDM              R2!,{R5}    ;  get next addend 
                                                            word
  194 00000016 416C            ADCS             R4,R4,R5    ;  add for next sum
                                                             word
  195 00000018 C010            STM              R0!,{R4}    ;  store result
  196 0000001A F3EF 8600       MRS              R6,APSR     ;  preserve conditi
                                                            on flags
  197 0000001E 1E5B            SUBS             R3,R3,#1    ;} while (LoopCount
                                                            er-- > 0)
  198 00000020 D8F5            BHI              AddIntMultiULoop
  199 00000022 F386 8800       MSR              APSR,R6     ;restore condition 
                                                            flags
  200 00000026 D201            BCS              AddIntMultiUOver ;if (C clear)
  201 00000028 2000            MOVS             R0,#0       ;  Report no error
  202 0000002A E000            B                AddIntMultiUDone
  203 0000002C         AddIntMultiUOver                     ;else (C set)
  204 0000002C 2001            MOVS             R0,#1       ;  Report overflow
  205 0000002E         AddIntMultiUDone
  206 0000002E BC7E            POP              {R1-R6}     ;restore registers
  207 00000030 4770            BX               LR          ;return
  208 00000032         ;-------------------------------------------------------
                       --------
  209 00000032         Dequeue
  210 00000032         ;*******************************************************
                       ***************
  211 00000032         ; Dequeues a character to R0 from queue referenced by R1
                       .
  212 00000032         ; Sets/clears CCR bit C to reflect failure/success of de
                       queue.
  213 00000032         ; Input:   R1: Address of queue management record struct
                       ure
  214 00000032         ; Output:  R0: Character dequeued
  215 00000032         ;          PSR.C = (Boolean) Failure
  216 00000032         ; Modify:  R0, PSR
  217 00000032         ;*******************************************************
                       ***************
  218 00000032         ;Save registers
  219 00000032 B40C            PUSH             {R2-R3}
  220 00000034         ;Dequeue
  221 00000034 7C4A            LDRB             R2,[R1,#NUM_ENQD] 
                                                            ;check queue count
  222 00000036 2A00            CMP              R2,#0       ;if (queue not empt
                                                            y) {
  223 00000038 D00C            BEQ              DequeueFail
  224 0000003A 684B            LDR              R3,[R1,#OUT_PTR] ;  get address
                                                             of character
  225 0000003C 7818            LDRB             R0,[R3,#0]  ;  dequeue characte
                                                            r
  226 0000003E 1C5B            ADDS             R3,R3,#1    ;  OutPointer++
  227 00000040 1E52            SUBS             R2,R2,#1    ;  NumberEnqueued--
                                                            
  228 00000042 744A            STRB             R2,[R1,#NUM_ENQD]
  229 00000044 68CA            LDR              R2,[R1,#BUF_PAST] ;  if (OutPoi
                                                            nter past buffer) {
                                                            
  230 00000046 4293            CMP              R3,R2
  231 00000048 D300            BLO              DequeueOutPtr
  232 0000004A 688B            LDR              R3,[R1,#BUF_STRT] ;    adjust t



ARM Macro Assembler    Page 7 CMPE 250 Lab Exercise Eleven


                                                            o start of buffer
  233 0000004C         DequeueOutPtr                        ;  }end if (OutPoin
                                                            ter)
  234 0000004C 604B            STR              R3,[R1,#OUT_PTR] ;  store updat
                                                            ed OutPointer
  235 0000004E 2200            MOVS             R2,#0       ;  clear C flag (re
                                                            port successful)
  236 00000050 0852            LSRS             R2,R2,#1
  237 00000052 E001            B                DequeueDone ;}end if (queue)
  238 00000054         DequeueFail                          ;else { ;nothing to
                                                             dequeue
  239 00000054 2201            MOVS             R2,#1       ;  set C flag (repo
                                                            rt failure)
  240 00000056 0852            LSRS             R2,R2,#1    ;}end else
  241 00000058         DequeueDone
  242 00000058         ;Restore registers
  243 00000058 BC0C            POP              {R2-R3}
  244 0000005A 4770            BX               LR
  245 0000005C         ;-------------------------------------------------------
                       --------
  246 0000005C         Enqueue
  247 0000005C         ;*******************************************************
                       ***************
  248 0000005C         ; Enqueue character from R0.
  249 0000005C         ; Sets/clears CCR bit C to reflect failure/success of de
                       queue.
  250 0000005C         ; Input:   R0: Character to enqueue
  251 0000005C         ;          R1: Address of queue management record struct
                       ure
  252 0000005C         ; Output:  CCR.C = (Boolean) Failure
  253 0000005C         ; Modify:  CCR
  254 0000005C         ;*******************************************************
                       ***************
  255 0000005C         ;Save registers
  256 0000005C B40C            PUSH             {R2-R3}
  257 0000005E         ;Enqueue
  258 0000005E 7C4A            LDRB             R2,[R1,#NUM_ENQD] 
                                                            ;check queue count
  259 00000060 7C0B            LDRB             R3,[R1,#BUF_SIZE] ;against queu
                                                            e capacity
  260 00000062 429A            CMP              R2,R3       ;if queue not full
  261 00000064 D20C            BHS              EnqueueFail
  262 00000066 680B            LDR              R3,[R1,#IN_PTR] ;  address for 
                                                            character
  263 00000068 7018            STRB             R0,[R3,#0]  ;  enqueue characte
                                                            r
  264 0000006A 1C5B            ADDS             R3,R3,#1    ;  InPointer++
  265 0000006C 1C52            ADDS             R2,R2,#1    ;  NumberEnqueued++
                                                            
  266 0000006E 744A            STRB             R2,[R1,#NUM_ENQD]
  267 00000070 68CA            LDR              R2,[R1,#BUF_PAST] ;  if (InPoin
                                                            ter past buffer) {
  268 00000072 4293            CMP              R3,R2
  269 00000074 D300            BLO              EnqueueInPtr
  270 00000076 688B            LDR              R3,[R1,#BUF_STRT] ;    adjust t
                                                            o start of buffer
  271 00000078         EnqueueInPtr                         ;  }end if (InPoint
                                                            er)
  272 00000078 600B            STR              R3,[R1,#IN_PTR] ;  store update



ARM Macro Assembler    Page 8 CMPE 250 Lab Exercise Eleven


                                                            d InPointer
  273 0000007A 2200            MOVS             R2,#0       ;  clear C flag (re
                                                            port successful)
  274 0000007C 0852            LSRS             R2,R2,#1
  275 0000007E E001            B                EnqueueDone ;}end if (queue)
  276 00000080         EnqueueFail                          ;else {;no room in 
                                                            queue
  277 00000080 2201            MOVS             R2,#1       ;  set C flag (repo
                                                            rt failure)
  278 00000082 0852            LSRS             R2,R2,#1    ;}end else
  279 00000084         EnqueueDone
  280 00000084         ;Restore registers
  281 00000084 BC0C            POP              {R2-R3}
  282 00000086 4770            BX               LR
  283 00000088         ;-------------------------------------------------------
                       --------
  284 00000088         GetChar
  285 00000088         ;*******************************************************
                       ***************
  286 00000088         ;Gets a character from receive queue buffer
  287 00000088         ;Calls:  Dequeue
  288 00000088         ;Output:  R0: Character received from queue buffer
  289 00000088         ;Modifies:  R0, PSR
  290 00000088         ;*******************************************************
                       ***************
  291 00000088 B502            PUSH             {R1,LR}     ;save temporary reg
                                                            ister
  292 0000008A 4956            LDR              R1,=RxQRecord ;setup dequeue pa
                                                            rameter
  293 0000008C         GetCharWait                          ;repeat {
  294 0000008C B672            CPSID            I           ;  mask interrupts
  295 0000008E F7FF FFD0       BL               Dequeue     ;  attempt dequeue
  296 00000092 B662            CPSIE            I           ;  unmask interrupt
                                                            s
  297 00000094 D2FA            BCS              GetCharWait ;} until dequeue su
                                                            ccessful
  298 00000096 BD02            POP              {R1,PC}     ;restore temporary 
                                                            register
  299 00000098         ;-------------------------------------------------------
                       --------
  300 00000098                 EXPORT           GetString
  301 00000098         GetString
  302 00000098         ;*******************************************************
                       ***************
  303 00000098         ;Receives each character in string from UART0 and adds N
                       ULL 
  304 00000098         ;termination.  Input of CR (from pressing "Enter" key) t
                       erminates
  305 00000098         ;input.  Handles backspace (BS) control code, but all ot
                       her control 
  306 00000098         ;codes are ignored.
  307 00000098         ;Calls:  GetChar
  308 00000098         ;        PutChar
  309 00000098         ;EQUate:  MAX_STRING (assumed >= 1)
  310 00000098         ;Input:  R0: Address of string to transmit
  311 00000098         ;Modifies:  PSR
  312 00000098         ;*******************************************************
                       ***************
  313 00000098 B50F            PUSH             {R0-R3,LR}  ;save registers mod



ARM Macro Assembler    Page 9 CMPE 250 Lab Exercise Eleven


                                                            ified
  314 0000009A 4601            MOV              R1,R0       ;base address of st
                                                            ring
  315 0000009C 2200            MOVS             R2,#0       ;character count
  316 0000009E 234E            MOVS             R3,#(MAX_STRING - 1) 
                                                            ;maximum characters
                                                            
  317 000000A0 D00F            BEQ              GetStringFull ;while (space for
                                                             a character) {
  318 000000A2         GetStringChar
  319 000000A2 F7FF FFF1       BL               GetChar     ;  receive characte
                                                            r
  320 000000A6 2808            CMP              R0,#BS      ;  if backspace
  321 000000A8 D019            BEQ              GetStringBS ;    evaluate posit
                                                            ion
  322 000000AA 280D            CMP              R0,#CR      ;  elseif CR
  323 000000AC D00F            BEQ              GetStringDone ;    done
  324 000000AE 2820            CMP              R0,#' '     ;  elseif other con
                                                            trol character
  325 000000B0 D3F7            BLO              GetStringChar ;    ignore
  326 000000B2 287F            CMP              R0,#0x7F
  327 000000B4 D8F5            BHI              GetStringChar ;  else {
  328 000000B6 F000 F850       BL               PutChar     ;    echo character
                                                            
  329 000000BA 5488            STRB             R0,[R1,R2]  ;    store in strin
                                                            g
  330 000000BC 1C52            ADDS             R2,R2,#1    ;    character coun
                                                            t ++
  331 000000BE 429A            CMP              R2,R3       ;  }end else
  332 000000C0 D3EF            BLO              GetStringChar ;}end while (spac
                                                            e for a character)
  333 000000C2         GetStringFull                        ;repeat {
  334 000000C2 F7FF FFE1       BL               GetChar     ;  receive characte
                                                            r
  335 000000C6 2808            CMP              R0,#BS      ;  if backspace
  336 000000C8 D009            BEQ              GetStringBS ;    evaluate posit
                                                            ion            
  337 000000CA 280D            CMP              R0,#CR
  338 000000CC D1F9            BNE              GetStringFull ;} until CR recei
                                                            ved
  339 000000CE         GetStringDone
  340 000000CE F000 F844       BL               PutChar     ;echo CR
  341 000000D2 200A            MOVS             R0,#LF      ;print LF
  342 000000D4 F000 F841       BL               PutChar
  343 000000D8 2000            MOVS             R0,#NULL    ;terminate with NUL
                                                            L
  344 000000DA 5488            STRB             R0,[R1,R2]
  345 000000DC BD0F            POP              {R0-R3,PC}  ;restore modified r
                                                            egisters and return
                                                            
  346 000000DE 2A00    GetStringBS
                               CMP              R2,#0       ;if (not at start o
                                                            f string) {
  347 000000E0 D0DF            BEQ              GetStringChar
  348 000000E2 F000 F83A       BL               PutChar     ;  echo backspace
  349 000000E6 1E52            SUBS             R2,R2,#1    ;  character count 
                                                             --
  350 000000E8 2020            MOVS             R0,#' '     ;  overwrite with s
                                                            pace



ARM Macro Assembler    Page 10 CMPE 250 Lab Exercise Eleven


  351 000000EA F000 F836       BL               PutChar
  352 000000EE 2008            MOVS             R0,#BS      ;  back space
  353 000000F0 F000 F833       BL               PutChar
  354 000000F4 E7D5            B                GetStringChar ;}end if and resu
                                                            me while
  355 000000F6         ;-------------------------------------------------------
                       --------
  356 000000F6         Init_Queue
  357 000000F6         ;*******************************************************
                       ***************
  358 000000F6         ; Initializes FIFO queue management record structure whe
                       re R1 points
  359 000000F6         ; for byte queue buffer where R0 points and whose size i
                       s in R2.
  360 000000F6         ; Input:  None
  361 000000F6         ; Output:  None
  362 000000F6         ; Modifies:  PSR
  363 000000F6         ;*******************************************************
                       ***************
  364 000000F6 B401            PUSH             {R0}
  365 000000F8 6008            STR              R0,[R1,#IN_PTR]
  366 000000FA 6048            STR              R0,[R1,#OUT_PTR]
  367 000000FC 6088            STR              R0,[R1,#BUF_STRT]
  368 000000FE 1880            ADDS             R0,R0,R2
  369 00000100 60C8            STR              R0,[R1,#BUF_PAST]
  370 00000102 740A            STRB             R2,[R1,#BUF_SIZE]
  371 00000104 2000            MOVS             R0,#0
  372 00000106 7448            STRB             R0,[R1,#NUM_ENQD]
  373 00000108 BC01            POP              {R0}
  374 0000010A 4770            BX               LR
  375 0000010C         ;-------------------------------------------------------
                       --------
  376 0000010C         Init_UART0
  377 0000010C         ;*******************************************************
                       ***************
  378 0000010C         ; Initializes UART0 for 9600 baud and 8N1 format
  379 0000010C         ; Input:  None
  380 0000010C         ; Output:  None
  381 0000010C         ; Modifies:  PSR
  382 0000010C         ;*******************************************************
                       ***************
  383 0000010C         ;Initialize UART0
  384 0000010C         ;Preserve registers used
  385 0000010C B407            PUSH             {R0-R2}
  386 0000010E         ;Set UART0 for external connection
  387 0000010E 4836            LDR              R0,=SIM_SOPT5
  388 00000110 4935            LDR              R1,=SIM_SOPT5_UART0_EXTERN_MASK
_CLEAR
  389 00000112 6802            LDR              R2,[R0,#0]
  390 00000114 438A            BICS             R2,R2,R1
  391 00000116 6002            STR              R2,[R0,#0]
  392 00000118         ;Enable UART0 module clock
  393 00000118 4833            LDR              R0,=SIM_SCGC4
  394 0000011A 4933            LDR              R1,=SIM_SCGC4_UART0CGC_MASK
  395 0000011C 6802            LDR              R2,[R0,#0]
  396 0000011E 430A            ORRS             R2,R2,R1
  397 00000120 6002            STR              R2,[R0,#0]
  398 00000122         ;Enable PORT E module clock
  399 00000122         ; CHECK THIS



ARM Macro Assembler    Page 11 CMPE 250 Lab Exercise Eleven


  400 00000122 4831            LDR              R0,=SIM_SCGC5
  401 00000124 4930            LDR              R1,=SIM_SCGC5_PORTECGC_MASK
  402 00000126 6802            LDR              R2,[R0,#0]
  403 00000128 430A            ORRS             R2,R2,R1
  404 0000012A 6002            STR              R2,[R0,#0]
  405 0000012C         ;Select PORT E Pin 1 (J2 Pin 20) for UART0 RX
  406 0000012C 482E            LDR              R0,=PORTE_PCR1
  407 0000012E 492E            LDR              R1,=PORT_PCR_SET_PTE1_UART0_RX
  408 00000130 6001            STR              R1,[R0,#0]
  409 00000132         ;Select PORT E Pin 0 (J2 Pin 18) for UART0 TX
  410 00000132 482D            LDR              R0,=PORTE_PCR0
  411 00000134 492C            LDR              R1,=PORT_PCR_SET_PTE0_UART0_TX
  412 00000136 6001            STR              R1,[R0,#0]
  413 00000138         ;THROUGH THIS.
  414 00000138         
  415 00000138         ;Set for 9600 baud from 96MHz PLL clock
  416 00000138 482B            LDR              R0,=UART0_BASE
  417 0000013A 2100            MOVS             R1,#UART_BDH_38400
  418 0000013C 7001            STRB             R1,[R0,#UART_BDH_OFFSET]
  419 0000013E 2127            MOVS             R1,#UART_BDL_38400
  420 00000140 7001            STRB             R1,[R0,#UART_BDL_OFFSET]
  421 00000142 2100            MOVS             R1,#UART_C1_8N1
  422 00000144 7001            STRB             R1,[R0,#UART_C1_OFFSET]
  423 00000146 2100            MOVS             R1,#UART_C3_NO_TXINV
  424 00000148 7001            STRB             R1,[R0,#UART_C3_OFFSET]
  425 0000014A 2100            MOVS             R1,#UART_C4_NO_DMA
  426 0000014C 7001            STRB             R1,[R0,#UART_C4_OFFSET]
  427 0000014E 2100            MOVS             R1,#UART_S2_NO_RXINV_BRK10_NO_L
BKDETECT
  428 00000150 7001            STRB             R1,[R0,#UART_S2_OFFSET]
  429 00000152 2100            MOVS             R1,#UART_C2_T_RI
  430 00000154 7001            STRB             R1,[R0,#UART_C2_OFFSET]
  431 00000156         ;Restore registers used
  432 00000156 BC07            POP              {R0-R2}
  433 00000158 4770            BX               LR
  434 0000015A         ;-------------------------------------------------------
                       --------
  435 0000015A         PutChar
  436 0000015A         ;*******************************************************
                       ***************
  437 0000015A         ;Puts character in transmit queue buffer
  438 0000015A         ;Calls:  Enqueue
  439 0000015A         ;Input:  R0: Character to transmit
  440 0000015A         ;Modifies:  PSR
  441 0000015A         ;*******************************************************
                       ***************
  442 0000015A B506            PUSH             {R1-R2,LR}  ;save temporary reg
                                                            isters
  443 0000015C 4923            LDR              R1,=TxQRecord ;setup enqueue pa
                                                            rameter
  444 0000015E         PutCharWait                          ;repeat {
  445 0000015E B672            CPSID            I           ;  mask interrupts
  446 00000160 F7FF FF7C       BL               Enqueue     ;  enqueue characte
                                                            r
  447 00000164 B662            CPSIE            I           ;  unmask interrupt
                                                            s
  448 00000166 D2FA            BCS              PutCharWait ;} until successful
                                                            
  449 00000168 491F            LDR              R1,=UART0_BASE ;Enable transmit



ARM Macro Assembler    Page 12 CMPE 250 Lab Exercise Eleven


                                                             interrupt
  450 0000016A 2200            MOVS             R2,#UART_C2_TI_RI
  451 0000016C 700A            STRB             R2,[R1,#UART_C2_OFFSET]
  452 0000016E BD06            POP              {R1-R2,PC}  ;restore temporary 
                                                            registers
  453 00000170         ;-------------------------------------------------------
                       --------
  454 00000170                 EXPORT           PutString
  455 00000170         PutString
  456 00000170         ;*******************************************************
                       ***************
  457 00000170         ;Transmits each character in null-terminated string to U
                       ART0.
  458 00000170         ;Calls:  PutChar
  459 00000170         ;Input:  R0: Address of string to transmit
  460 00000170         ;Modifies:  PSR
  461 00000170         ;*******************************************************
                       ***************
  462 00000170         ;Save registers
  463 00000170 B507            PUSH             {R0-R2,LR}
  464 00000172 4601            MOV              R1,R0       ;R0 needed for para
                                                            meter
  465 00000174         PutStringLoop                        ;repeat {
  466 00000174 7808            LDRB             R0,[R1,#0]  ;  CurrentChar of s
                                                            tring
  467 00000176 2800            CMP              R0,#NULL    ;  if (CurrentChar 
                                                            != NULL) {
  468 00000178 D003            BEQ              PutStringDone
  469 0000017A F7FF FFEE       BL               PutChar     ;    Send current c
                                                            har to terminal
  470 0000017E 1C49            ADDS             R1,R1,#1    ;    CurrentCharPtr
                                                            ++
  471 00000180 E7F8            B                PutStringLoop ;} until (Current
                                                            Char == NULL)
  472 00000182         ;Restore registers
  473 00000182         PutStringDone
  474 00000182 BD07            POP              {R0-R2,PC}
  475 00000184         ;-------------------------------------------------------
                       --------
  476 00000184                 EXPORT           SerialDriverInit
  477 00000184         SerialDriverInit
  478 00000184         ;*******************************************************
                       ***************
  479 00000184         ;Initializes UART0 and queues for serial driver
  480 00000184         ;Calls:  InitQueue
  481 00000184         ;Modifies:  PSR
  482 00000184         ;*******************************************************
                       ***************
  483 00000184 B507            PUSH             {R0-R2,LR}
  484 00000186         ;Initialize UART0 for 8N1, 9600 with RIE
  485 00000186 F7FF FFC1       BL               Init_UART0
  486 0000018A         ;Unmask UART0 interrupts
  487 0000018A 4817            LDR              R0,=NVIC_ISER
  488 0000018C 4916            LDR              R1,=UART0_IRQ_MASK
  489 0000018E 6001            STR              R1,[R0,#0]
  490 00000190         ;Set UART0 interrupt priority
  491 00000190 4815            LDR              R0,=UART0_IPR
  492 00000192 4915            LDR              R1,=(UART0_IRQ_PRI << UART0_PRI
_POS)



ARM Macro Assembler    Page 13 CMPE 250 Lab Exercise Eleven


  493 00000194 6001            STR              R1,[R0,#0]
  494 00000196         ;-------------------------------------------------------
                       --------
  495 00000196         ;Initialize circular FIFO queue management record struct
                       ures
  496 00000196         ;Rx queue
  497 00000196 4816            LDR              R0,=RxQBuffer
  498 00000198 4912            LDR              R1,=RxQRecord
  499 0000019A 2250            MOVS             R2,#XQ_BUF_SZ
  500 0000019C F7FF FFAB       BL               Init_Queue  ;initialize queue r
                                                            ecord
  501 000001A0         ;Tx queue
  502 000001A0 4814            LDR              R0,=TxQBuffer
  503 000001A2 4912            LDR              R1,=TxQRecord
  504 000001A4         ;MOVS    R2,#XQ_BUF_SZ
  505 000001A4 F7FF FFA7       BL               Init_Queue  ;initialize queue r
                                                            ecord
  506 000001A8 BD07            POP              {R0-R2,PC}
  507 000001AA         ;-------------------------------------------------------
                       --------
  508 000001AA         UART0_ISR
  509 000001AA         ;*******************************************************
                       ***************
  510 000001AA         ;UART0 Interrupt Service Routine
  511 000001AA         ;*******************************************************
                       ***************
  512 000001AA B672            CPSID            I           ;mask all KL46 inte
                                                            rrupts
  513 000001AC B500            PUSH             {LR}        ;save modified regi
                                                            ster
  514 000001AE 4A0E            LDR              R2,=UART0_BASE 
                                                            ;if TxIRQ enabled {
                                                            
  515 000001B0 2000            MOVS             R0,#UART_C2_TIE_MASK
  516 000001B2 7813            LDRB             R3,[R2,#UART_C2_OFFSET]
  517 000001B4 4203            TST              R3,R0
  518 000001B6 D008            BEQ              UART0_ISR_RxCheck
  519 000001B8 2000            MOVS             R0,#UART_S1_TDRE_MASK 
                                                            ;  if TxIRQ { 
  520 000001BA 7813            LDRB             R3,[R2,#UART_S1_OFFSET]
  521 000001BC 4203            TST              R3,R0
  522 000001BE D004            BEQ              UART0_ISR_RxCheck
  523 000001C0 490A            LDR              R1,=TxQRecord ;    setup TxQ de
                                                            queue
  524 000001C2 F7FF FF36       BL               Dequeue     ;    dequeue
  525 000001C6 D20A            BCS              UART0_ISR_TxIRQDisable ;    if 
                                                            successful {
  526 000001C8 7010            STRB             R0,[R2,#UART_D_OFFSET] ;      t
                                                            ransmit character
  527 000001CA         ;    } endif successful
  528 000001CA         ;  } endif TxIRQ
  529 000001CA         ;} endif TxIRQ enabled
  530 000001CA         UART0_ISR_RxCheck                    ;if RxIRQ {
  531 000001CA 2000            MOVS             R0,#UART_S1_RDRF_MASK
  532 000001CC 7813            LDRB             R3,[R2,#UART_S1_OFFSET]
  533 000001CE 4203            TST              R3,R0
  534 000001D0 D003            BEQ              UART0_ISR_Done
  535 000001D2 7810            LDRB             R0,[R2,#UART_D_OFFSET] ;  recei
                                                            ve character



ARM Macro Assembler    Page 14 CMPE 250 Lab Exercise Eleven


  536 000001D4 4903            LDR              R1,=RxQRecord ;  setup RxQ eneq
                                                            ueue
  537 000001D6 F7FF FF41       BL               Enqueue     ;  enqueue
  538 000001DA         UART0_ISR_Done                       ;}end if RxIRQ
  539 000001DA B662            CPSIE            I           ;unmask all KL46 in
                                                            terrupts
  540 000001DC BD00            POP              {PC}
  541 000001DE         UART0_ISR_TxIRQDisable               ;TxIRQ dequeue unsu
                                                            ccessful {
  542 000001DE 2300            MOVS             R3,#UART_C2_T_RI 
                                                            ;  disable TxIRQ
  543 000001E0 7013            STRB             R3,[R2,#UART_C2_OFFSET]
  544 000001E2 E7F2            B                UART0_ISR_RxCheck ;}
  545 000001E4         ;-------------------------------------------------------
                       --------
  546 000001E4         ;>>>>>   end subroutine code <<<<<
  547 000001E4                 ALIGN
  548 000001E4         ;*******************************************************
                       *********
  549 000001E4         ;Vector Table Mapped to Address 0 at Reset
  550 000001E4         ;Linker requires __Vectors to be exported
  551 000001E4 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             RESET, DATA, READONLY
  552 00000000                 EXPORT           __Vectors
  553 00000000                 EXPORT           __Vectors_End
  554 00000000                 EXPORT           __Vectors_Size
  555 00000000                 IMPORT           __initial_sp
  556 00000000                 IMPORT           Dummy_Handler
  557 00000000                 IMPORT           Reset_Handler
  558 00000000         __Vectors
  559 00000000         ;ARM core vectors
  560 00000000 00000000        DCD              __initial_sp ;00:end of stack
  561 00000004 00000000        DCD              Reset_Handler ;01:reset vector
  562 00000008 00000000        DCD              Dummy_Handler ;02:NMI
  563 0000000C 00000000        DCD              Dummy_Handler ;03:hard fault
  564 00000010 00000000        DCD              Dummy_Handler ;04:(reserved)



ARM Macro Assembler    Page 15 CMPE 250 Lab Exercise Eleven


  565 00000014 00000000        DCD              Dummy_Handler ;05:(reserved)
  566 00000018 00000000        DCD              Dummy_Handler ;06:(reserved)
  567 0000001C 00000000        DCD              Dummy_Handler ;07:(reserved)
  568 00000020 00000000        DCD              Dummy_Handler ;08:(reserved)
  569 00000024 00000000        DCD              Dummy_Handler ;09:(reserved)
  570 00000028 00000000        DCD              Dummy_Handler ;10:(reserved)
  571 0000002C 00000000        DCD              Dummy_Handler ;11:SVCall (super
                                                            visor call)
  572 00000030 00000000        DCD              Dummy_Handler ;12:(reserved)
  573 00000034 00000000        DCD              Dummy_Handler ;13:(reserved)
  574 00000038 00000000        DCD              Dummy_Handler ;14:PendableSrvRe
                                                            q (pendable request
                                                             
  575 0000003C         ;   for system service)
  576 0000003C 00000000        DCD              Dummy_Handler ;15:SysTick (syst
                                                            em tick timer)
  577 00000040 00000000        DCD              Dummy_Handler ;16:DMA channel 0
                                                             xfer complete/erro
                                                            r
  578 00000044 00000000        DCD              Dummy_Handler ;17:DMA channel 1
                                                             xfer complete/erro
                                                            r
  579 00000048 00000000        DCD              Dummy_Handler ;18:DMA channel 2
                                                             xfer complete/erro
                                                            r
  580 0000004C 00000000        DCD              Dummy_Handler ;19:DMA channel 3
                                                             xfer complete/erro
                                                            r
  581 00000050 00000000        DCD              Dummy_Handler ;20:(reserved)
  582 00000054 00000000        DCD              Dummy_Handler ;21:command compl
                                                            ete; read collision
                                                            
  583 00000058 00000000        DCD              Dummy_Handler ;22:low-voltage d
                                                            etect;
  584 0000005C         ;   low-voltage warning
  585 0000005C 00000000        DCD              Dummy_Handler ;23:low leakage w
                                                            akeup
  586 00000060 00000000        DCD              Dummy_Handler ;24:I2C0
  587 00000064 00000000        DCD              Dummy_Handler ;25:I2C1
  588 00000068 00000000        DCD              Dummy_Handler ;26:SPI0 (all IRQ
                                                             sources)
  589 0000006C 00000000        DCD              Dummy_Handler ;27:SPI1 (all IRQ
                                                             sources)
  590 00000070 00000000        DCD              Dummy_Handler ;28:UART0 (status
                                                            ; error)
  591 00000074 00000000        DCD              UART0_ISR   ;29:UART0 (status; 
                                                            error)
  592 00000078 00000000        DCD              Dummy_Handler ;30:UART2 (status
                                                            ; error)
  593 0000007C 00000000        DCD              Dummy_Handler ;31:ADC0
  594 00000080 00000000        DCD              Dummy_Handler ;32:CMP0
  595 00000084 00000000        DCD              Dummy_Handler ;33:TPM0
  596 00000088 00000000        DCD              Dummy_Handler ;34:TPM1
  597 0000008C 00000000        DCD              Dummy_Handler ;35:TPM2
  598 00000090 00000000        DCD              Dummy_Handler ;36:RTC (alarm)
  599 00000094 00000000        DCD              Dummy_Handler ;37:RTC (seconds)
                                                            
  600 00000098 00000000        DCD              Dummy_Handler ;38:PIT (all IRQ 
                                                            sources)



ARM Macro Assembler    Page 16 CMPE 250 Lab Exercise Eleven


  601 0000009C 00000000        DCD              Dummy_Handler ;39:I2S0
  602 000000A0 00000000        DCD              Dummy_Handler ;40:USB0
  603 000000A4 00000000        DCD              Dummy_Handler ;41:DAC0
  604 000000A8 00000000        DCD              Dummy_Handler ;42:TSI0
  605 000000AC 00000000        DCD              Dummy_Handler ;43:MCG
  606 000000B0 00000000        DCD              Dummy_Handler ;44:LPTMR0
  607 000000B4 00000000        DCD              Dummy_Handler ;45:Segment LCD
  608 000000B8 00000000        DCD              Dummy_Handler ;46:PORTA pin det
                                                            ect
  609 000000BC 00000000        DCD              Dummy_Handler ;47:PORTC and POR
                                                            TD pin detect
  610 000000C0         __Vectors_End
  611 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
  612 000000C0                 ALIGN
  613 000000C0         ;*******************************************************
                       *********
  614 000000C0         ;Constants
  615 000000C0                 AREA             MyConst,DATA,READONLY
  616 00000000         ;>>>>> begin constants here <<<<<
  617 00000000         ;>>>>>   end constants here <<<<<
  618 00000000         ;*******************************************************
                       *********
  619 00000000         ;Variables
  620 00000000                 AREA             MyData,DATA,READWRITE
  621 00000000         ;>>>>> begin variables here <<<<<
  622 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    RxQBuffer
                               SPACE            XQ_BUF_SZ   ; FIFO queue buffer
                                                            
  623 00000050                 ALIGN
  624 00000050 00 00 00 
              00 00 00 



ARM Macro Assembler    Page 17 CMPE 250 Lab Exercise Eleven


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 RxQRecord
                               SPACE            Q_REC_SZ    ; FIFO queue manage
                                                            ment record
  625 00000062 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    TxQBuffer
                               SPACE            XQ_BUF_SZ   ; FIFO queue buffer
                                                            
  626 000000B2 00 00           ALIGN
  627 000000B4 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 TxQRecord
                               SPACE            Q_REC_SZ    ; FIFO queue manage
                                                            ment record
  628 000000C6         ;>>>>>   end variables here <<<<<
  629 000000C6                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\uvbuild\uart_1.d -o.\uvbuild\uart_1.o -I"C:\Freescale\PExDrv v1
0.4\eclipse\ProcessorExpert\lib\Kinetis\pdd\inc" -I"C:\Freescale\PExDrv v10.4\e
clipse\ProcessorExpert\lib\Kinetis\iofiles" -I.\Sources -I.\Generated_Code -I.\
Generated_Code -I.\Project_Settings\Startup_Code -I.\Sources -IC:\Keil_v5\ARM\R
V31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -
-predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 514" --list=.\ua
rt.lst Sources\uart.s
