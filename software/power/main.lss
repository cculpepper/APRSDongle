
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000656  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000656  000006ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  0080008a  0080008a  00000714  2**0
                  ALLOC
  3 .stab         00001adc  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013da  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  000035ca  2**0
                  CONTENTS, READONLY
  6 .debug_info   00000420  00000000  00000000  000035f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e8  00000000  00000000  00003a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00003df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  00003e16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	9e c0       	rjmp	.+316    	; 0x14a <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	46 c1       	rjmp	.+652    	; 0x2ac <__vector_15>
  20:	95 c1       	rjmp	.+810    	; 0x34c <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e5       	ldi	r30, 0x56	; 86
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 38       	cpi	r26, 0x8A	; 138
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	aa e8       	ldi	r26, 0x8A	; 138
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a1 3f       	cpi	r26, 0xF1	; 241
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	d8 d2       	rcall	.+1456   	; 0x606 <main>
  56:	fd c2       	rjmp	.+1530   	; 0x652 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <twi_callback>:



void twi_callback(volatile uint8_t *input_buffer_length, 
		volatile const uint8_t *input_buffer, volatile uint8_t *output_buffer_length, 
		volatile uint8_t *output_buffer) {
  5a:	f9 01       	movw	r30, r18
	/*PORTB ^= (1<<2);        //Use xor to toggle the LED*/
	i2cOutLen = output_buffer_length;
  5c:	50 93 e4 00 	sts	0x00E4, r21
  60:	40 93 e3 00 	sts	0x00E3, r20
	i2cOutBuf = output_buffer;
  64:	30 93 ee 00 	sts	0x00EE, r19
  68:	20 93 ed 00 	sts	0x00ED, r18
	i2cInLen = input_buffer_length;
  6c:	90 93 e6 00 	sts	0x00E6, r25
  70:	80 93 e5 00 	sts	0x00E5, r24
	i2cInBuf = input_buffer;
  74:	70 93 e2 00 	sts	0x00E2, r23
  78:	60 93 e1 00 	sts	0x00E1, r22
			switch (*i2cInBuf){
  7c:	db 01       	movw	r26, r22
  7e:	8c 91       	ld	r24, X
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	d9 f0       	breq	.+54     	; 0xba <twi_callback+0x60>
  84:	84 30       	cpi	r24, 0x04	; 4
  86:	19 f1       	breq	.+70     	; 0xce <twi_callback+0x74>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	89 f5       	brne	.+98     	; 0xee <twi_callback+0x94>
						break;
					}
				case (2):
					{
						// Voltage request. 
						i2cOutBuf[0] = v[0]++;
  8c:	90 91 e9 00 	lds	r25, 0x00E9
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	29 0f       	add	r18, r25
  94:	20 93 e9 00 	sts	0x00E9, r18
  98:	90 83       	st	Z, r25
						i2cOutBuf[1] = v[1]++;
  9a:	e0 91 ed 00 	lds	r30, 0x00ED
  9e:	f0 91 ee 00 	lds	r31, 0x00EE
  a2:	90 91 ea 00 	lds	r25, 0x00EA
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	29 0f       	add	r18, r25
  aa:	20 93 ea 00 	sts	0x00EA, r18
  ae:	91 83       	std	Z+1, r25	; 0x01
						*i2cOutLen = 2;
  b0:	e0 91 e3 00 	lds	r30, 0x00E3
  b4:	f0 91 e4 00 	lds	r31, 0x00E4
  b8:	19 c0       	rjmp	.+50     	; 0xec <twi_callback+0x92>
						break;
					}
				case (3):
					{
						i2cOutBuf[0] = cur[0];
  ba:	80 91 eb 00 	lds	r24, 0x00EB
  be:	80 83       	st	Z, r24
						i2cOutBuf[1] = cur[1];
  c0:	e0 91 ed 00 	lds	r30, 0x00ED
  c4:	f0 91 ee 00 	lds	r31, 0x00EE
  c8:	80 91 ec 00 	lds	r24, 0x00EC
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <twi_callback+0x86>
						*i2cOutLen = 2;
						break;
					}
				case (4):
					{
						i2cOutBuf[0] = temp[0];
  ce:	80 91 e7 00 	lds	r24, 0x00E7
  d2:	80 83       	st	Z, r24
						i2cOutBuf[1] = temp[1];
  d4:	e0 91 ed 00 	lds	r30, 0x00ED
  d8:	f0 91 ee 00 	lds	r31, 0x00EE
  dc:	80 91 e8 00 	lds	r24, 0x00E8
  e0:	81 83       	std	Z+1, r24	; 0x01
						*i2cOutLen = 2;
  e2:	e0 91 e3 00 	lds	r30, 0x00E3
  e6:	f0 91 e4 00 	lds	r31, 0x00E4
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <adcVinInit>:


void adcVinInit(void){
	// For right now, will set up for single ended, battery voltage measurement. 
	//
	PRR &= ~(1 << PRADC);
  f0:	00 98       	cbi	0x00, 0	; 0
	ADCSRA &= ~(1 << ADEN);
  f2:	37 98       	cbi	0x06, 7	; 6
	ADMUX = 0;
  f4:	17 b8       	out	0x07, r1	; 7

	ADCSRB = (1 << ADLAR) ;
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	83 b9       	out	0x03, r24	; 3
	ADCSRA = (0x6) | (1 << ADEN);
  fa:	86 e8       	ldi	r24, 0x86	; 134
  fc:	86 b9       	out	0x06, r24	; 6
  fe:	08 95       	ret

00000100 <measVin>:
}
int measVin(void) {
	int temp;
	while ( ADCSRA & (1 << ADSC));
 100:	36 99       	sbic	0x06, 6	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <measVin>
	adcVinInit();
 104:	f5 df       	rcall	.-22     	; 0xf0 <adcVinInit>
	ADCSRA |= (1 << ADSC);
 106:	36 9a       	sbi	0x06, 6	; 6
	while ( ADCSRA & (1 << ADSC));
 108:	36 99       	sbic	0x06, 6	; 6
 10a:	fe cf       	rjmp	.-4      	; 0x108 <measVin+0x8>
	/*v[0] = ADCH;*/
	/*v[1] = ADCL;*/
	if (v[0] == 0x00){
 10c:	80 91 e9 00 	lds	r24, 0x00E9
 110:	81 11       	cpse	r24, r1
 112:	04 c0       	rjmp	.+8      	; 0x11c <measVin+0x1c>
		PORTB ^= (1<<2);        //Use xor to toggle the LED
 114:	98 b3       	in	r25, 0x18	; 24
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	89 27       	eor	r24, r25
 11a:	88 bb       	out	0x18, r24	; 24
	}
}
 11c:	08 95       	ret

0000011e <adcCurInit>:
void adcCurInit(void){
	// For right now, will set up for single ended, battery voltage measurement. 
	// PA1 is pos
	// PA2 is neg
	//
	PRR &= ~(1 << PRADC);
 11e:	00 98       	cbi	0x00, 0	; 0
	ADCSRA &= ~(1 << ADEN);
 120:	37 98       	cbi	0x06, 7	; 6
	ADMUX = 0x0d;
 122:	8d e0       	ldi	r24, 0x0D	; 13
 124:	87 b9       	out	0x07, r24	; 7

	ADCSRB = (1 << ADLAR) ;
 126:	80 e1       	ldi	r24, 0x10	; 16
 128:	83 b9       	out	0x03, r24	; 3
	ADCSRA = (0x6) | (1 << ADEN);
 12a:	86 e8       	ldi	r24, 0x86	; 134
 12c:	86 b9       	out	0x06, r24	; 6
 12e:	08 95       	ret

00000130 <measCur>:
}
int measCur(void) {
	int temp;
	while ( ADCSRA & (1 << ADSC));
 130:	36 99       	sbic	0x06, 6	; 6
 132:	fe cf       	rjmp	.-4      	; 0x130 <measCur>
	adcCurInit();
 134:	f4 df       	rcall	.-24     	; 0x11e <adcCurInit>
	ADCSRA |= (1 << ADSC);
 136:	36 9a       	sbi	0x06, 6	; 6
	while ( ADCSRA & (1 << ADSC));
 138:	36 99       	sbic	0x06, 6	; 6
 13a:	fe cf       	rjmp	.-4      	; 0x138 <measCur+0x8>
	cur[0] = ADCH;
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	80 93 eb 00 	sts	0x00EB, r24
	cur[1] = ADCL;
 142:	84 b1       	in	r24, 0x04	; 4
 144:	80 93 ec 00 	sts	0x00EC, r24
}
 148:	08 95       	ret

0000014a <__vector_6>:
		}
	}
}

ISR (TIM1_COMPA_vect)      //Interrupt Service Routine
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	PORTA ^= (1<<7);        //Use xor to toggle the LED
 16c:	8b b3       	in	r24, 0x1b	; 27
 16e:	80 58       	subi	r24, 0x80	; 128
 170:	8b bb       	out	0x1b, r24	; 27
	measCur();
 172:	de df       	rcall	.-68     	; 0x130 <measCur>
	measVin();	
 174:	c5 df       	rcall	.-118    	; 0x100 <measVin>
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <cwTone>:
	0xA1,
	};


void cwTone(char DitOrDah){
	LED1_On();		
 198:	df 9a       	sbi	0x1b, 7	; 27
	if (DitOrDah == 0) {
 19a:	81 11       	cpse	r24, r1
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <cwTone+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f e5       	ldi	r18, 0x5F	; 95
 1a0:	8a ee       	ldi	r24, 0xEA	; 234
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <cwTone+0xc>
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <cwTone+0x1e>
 1ae:	87 ea       	ldi	r24, 0xA7	; 167
 1b0:	91 e6       	ldi	r25, 0x61	; 97
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <cwTone+0x1a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <cwTone+0x20>
 1b8:	00 00       	nop
		/* Then we have a dah, 0 and all. `==*/ 
		_delay_ms(DAHTIME);
	} else {
		_delay_ms(DITTIME);
	}
	LED1_Off();	
 1ba:	df 98       	cbi	0x1b, 7	; 27
 1bc:	08 95       	ret

000001be <cwSend>:
}
char cwSend(char* data, int len){
 1be:	af 92       	push	r10
 1c0:	bf 92       	push	r11
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	7c 01       	movw	r14, r24
	char currChar;
	char* cwDataPtr;
	char currBit;
	
	cwDataPtr = data;
	while((data+len) > cwDataPtr){
 1d4:	ec 01       	movw	r28, r24
 1d6:	c6 0f       	add	r28, r22
 1d8:	d7 1f       	adc	r29, r23
		}

		charLen = (currChar >> 5); /* This is the length of the morse code char, in the top 3 bits*/ 
		currBit = 0;
		while ( charLen > 0 ){
			cwTone((currChar & ( 0x80 >> (3+currBit))));
 1da:	00 e8       	ldi	r16, 0x80	; 128
 1dc:	10 e0       	ldi	r17, 0x00	; 0
	char currChar;
	char* cwDataPtr;
	char currBit;
	
	cwDataPtr = data;
	while((data+len) > cwDataPtr){
 1de:	ec 16       	cp	r14, r28
 1e0:	fd 06       	cpc	r15, r29
 1e2:	e8 f5       	brcc	.+122    	; 0x25e <cwSend+0xa0>
		currChar = *cwDataPtr;
 1e4:	d7 01       	movw	r26, r14
 1e6:	ed 91       	ld	r30, X+
 1e8:	7d 01       	movw	r14, r26
		if (currChar >= 'A' && currChar <= 'Z'){
 1ea:	8f eb       	ldi	r24, 0xBF	; 191
 1ec:	8e 0f       	add	r24, r30
 1ee:	8a 31       	cpi	r24, 0x1A	; 26
 1f0:	20 f4       	brcc	.+8      	; 0x1fa <cwSend+0x3c>
			currChar = CwLetterData[currChar - 'A']; /* This sets the current char to the morse binary representation of the letter if it is a letter. */ 
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	e7 5d       	subi	r30, 0xD7	; 215
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <cwSend+0x4a>
		} else if (currChar >= '0' && currChar <= '9'){
 1fa:	80 ed       	ldi	r24, 0xD0	; 208
 1fc:	8e 0f       	add	r24, r30
 1fe:	8a 30       	cpi	r24, 0x0A	; 10
 200:	28 f4       	brcc	.+10     	; 0x20c <cwSend+0x4e>
			currChar = CwNumberData[currChar - '0'];
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	e0 5d       	subi	r30, 0xD0	; 208
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	d0 80       	ld	r13, Z
 20a:	01 c0       	rjmp	.+2      	; 0x20e <cwSend+0x50>
		} else {
			currChar = 0;  /* Because I dont know what to do...*/ 
 20c:	d1 2c       	mov	r13, r1
		}

		charLen = (currChar >> 5); /* This is the length of the morse code char, in the top 3 bits*/ 
 20e:	cd 2c       	mov	r12, r13
 210:	c2 94       	swap	r12
 212:	c6 94       	lsr	r12
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	c8 22       	and	r12, r24
		currBit = 0;
		while ( charLen > 0 ){
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	a9 2e       	mov	r10, r25
 21c:	b1 2c       	mov	r11, r1
 21e:	cc 20       	and	r12, r12
 220:	a1 f0       	breq	.+40     	; 0x24a <cwSend+0x8c>
			cwTone((currChar & ( 0x80 >> (3+currBit))));
 222:	c8 01       	movw	r24, r16
 224:	0a 2c       	mov	r0, r10
 226:	02 c0       	rjmp	.+4      	; 0x22c <cwSend+0x6e>
 228:	95 95       	asr	r25
 22a:	87 95       	ror	r24
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <cwSend+0x6a>
 230:	8d 21       	and	r24, r13
 232:	b2 df       	rcall	.-156    	; 0x198 <cwTone>
 234:	87 ea       	ldi	r24, 0xA7	; 167
 236:	91 e6       	ldi	r25, 0x61	; 97
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <cwSend+0x7a>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <cwSend+0x80>
 23e:	00 00       	nop
			/* A little bit crazy, passes to the sender, the current bit. Ands the current morse byte with a shifted 1  to get the current character*/ 
			_delay_ms(DITTIME);
			charLen--;
 240:	ca 94       	dec	r12
 242:	9f ef       	ldi	r25, 0xFF	; 255
 244:	a9 1a       	sub	r10, r25
 246:	b9 0a       	sbc	r11, r25
 248:	ea cf       	rjmp	.-44     	; 0x21e <cwSend+0x60>
 24a:	af e5       	ldi	r26, 0x5F	; 95
 24c:	ba ee       	ldi	r27, 0xEA	; 234
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	a1 50       	subi	r26, 0x01	; 1
 252:	b0 40       	sbci	r27, 0x00	; 0
 254:	20 40       	sbci	r18, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <cwSend+0x92>
 258:	00 c0       	rjmp	.+0      	; 0x25a <cwSend+0x9c>
 25a:	00 00       	nop
 25c:	c0 cf       	rjmp	.-128    	; 0x1de <cwSend+0x20>
 25e:	8f e5       	ldi	r24, 0x5F	; 95
 260:	9a ee       	ldi	r25, 0xEA	; 234
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	81 50       	subi	r24, 0x01	; 1
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	a0 40       	sbci	r26, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <__stack+0x5>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <__stack+0xf>
 26e:	00 00       	nop


	}
	_delay_ms(DAHTIME);
	
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	08 95       	ret

00000286 <set_sda_to_input>:
static uint16_t	local_frames_count;
static uint16_t	idle_call_count;

static void set_sda_to_input(void)
{
	DDR_USI &= ~_BV(PORT_USI_SDA);
 286:	d6 98       	cbi	0x1a, 6	; 26
 288:	08 95       	ret

0000028a <set_sda_to_output>:
}

static void set_sda_to_output(void)
{
	DDR_USI |= _BV(PORT_USI_SDA);
 28a:	d6 9a       	sbi	0x1a, 6	; 26
 28c:	08 95       	ret

0000028e <twi_reset>:

static void twi_reset(void)
{
	// make sure no sda/scl remains pulled up or down

	set_sda_to_input();		//	deactivate internal pullup on sda/scl
 28e:	fb df       	rcall	.-10     	; 0x286 <set_sda_to_input>
	DDR_USI |= _BV(PORT_USI_SCL);
}

static inline void set_sda_low(void)
{
	PORT_USI &= ~_BV(PORT_USI_SDA);
 290:	de 98       	cbi	0x1b, 6	; 27
	DDR_USI |= _BV(PORT_USI_SDA);
}

static inline void set_scl_to_input(void)
{
	DDR_USI &= ~_BV(PORT_USI_SCL);
 292:	d4 98       	cbi	0x1a, 4	; 26
	PORT_USI |= _BV(PORT_USI_SDA);
}

static inline void set_scl_low(void)
{
	PORT_USI &= ~_BV(PORT_USI_SCL);
 294:	dc 98       	cbi	0x1b, 4	; 27
	set_sda_to_input();		//	deactivate internal pullup on sda/scl
	set_sda_low();
	set_scl_to_input();
	set_scl_low();

	set_sda_to_output();	//	release (set high) on sda/scl
 296:	f9 df       	rcall	.-14     	; 0x28a <set_sda_to_output>
	PORT_USI &= ~_BV(PORT_USI_SDA);
}

static inline void set_sda_high(void)
{
	PORT_USI |= _BV(PORT_USI_SDA);
 298:	de 9a       	sbi	0x1b, 6	; 27
	set_scl_to_input();
	set_scl_low();

	set_sda_to_output();	//	release (set high) on sda/scl
	set_sda_high();
	set_sda_to_input();
 29a:	f5 df       	rcall	.-22     	; 0x286 <set_sda_to_input>
	PORT_USI &= ~_BV(PORT_USI_SDA);
}

static inline void set_sda_high(void)
{
	PORT_USI |= _BV(PORT_USI_SDA);
 29c:	de 9a       	sbi	0x1b, 6	; 27
	DDR_USI &= ~_BV(PORT_USI_SCL);
}

static inline void set_scl_to_output(void)
{
	DDR_USI |= _BV(PORT_USI_SCL);
 29e:	d4 9a       	sbi	0x1a, 4	; 26
	PORT_USI &= ~_BV(PORT_USI_SCL);
}

static inline void set_scl_high(void)
{
	PORT_USI |= _BV(PORT_USI_SCL);
 2a0:	dc 9a       	sbi	0x1b, 4	; 27
}

static inline void twi_reset_state(void)
{
	USISR =
 2a2:	80 ed       	ldi	r24, 0xD0	; 208
 2a4:	8e b9       	out	0x0e, r24	; 14
		(1		<< USIOIF)	|		// clear overflow condition flag
		(0		<< USIPF)	|		// !clear stop condition flag
		(1		<< USIDC)	|		// clear arbitration error flag
		(0x00	<< USICNT0);		// set counter to "8" bits

	USICR =
 2a6:	88 ea       	ldi	r24, 0xA8	; 168
 2a8:	8d b9       	out	0x0d, r24	; 13
 2aa:	08 95       	ret

000002ac <__vector_15>:

	twi_reset();
}

ISR(USI_START_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	set_sda_to_input();
 2ce:	db df       	rcall	.-74     	; 0x286 <set_sda_to_input>
	// start detector will hold SCL low) - if a stop condition arises then leave
	// the interrupt to prevent waiting forever - don't use USISR to test for stop
	// condition as in Application Note AVR312 because the stop condition Flag is
	// going to be set from the last TWI sequence

	while(!(PIN_USI & _BV(PIN_USI_SDA)) &&
 2d0:	ce 99       	sbic	0x19, 6	; 25
 2d2:	13 c0       	rjmp	.+38     	; 0x2fa <__vector_15+0x4e>
 2d4:	cc 9b       	sbis	0x19, 4	; 25
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <__vector_15+0x4e>
	//	sda = low	scl = low		break	start condition
	// 	sda = low	scl = high		loop
	//	sda = high	scl = low		break	stop condition
	//	sda = high	scl = high		break	stop condition

	if((PIN_USI & _BV(PIN_USI_SDA)))	// stop condition
 2d8:	ce 9b       	sbis	0x19, 6	; 25
 2da:	fa cf       	rjmp	.-12     	; 0x2d0 <__vector_15+0x24>
	{
		twi_reset();
 2dc:	d8 df       	rcall	.-80     	; 0x28e <twi_reset>

		if(stats_enabled)
 2de:	80 91 96 00 	lds	r24, 0x0096
 2e2:	88 23       	and	r24, r24
 2e4:	11 f1       	breq	.+68     	; 0x32a <__vector_15+0x7e>
			error_conditions_count++;
 2e6:	80 91 90 00 	lds	r24, 0x0090
 2ea:	90 91 91 00 	lds	r25, 0x0091
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	90 93 91 00 	sts	0x0091, r25
 2f4:	80 93 90 00 	sts	0x0090, r24
 2f8:	18 c0       	rjmp	.+48     	; 0x32a <__vector_15+0x7e>
		return;
	}

	if(stats_enabled)
 2fa:	80 91 96 00 	lds	r24, 0x0096
 2fe:	88 23       	and	r24, r24
 300:	49 f0       	breq	.+18     	; 0x314 <__vector_15+0x68>
		start_conditions_count++;
 302:	80 91 94 00 	lds	r24, 0x0094
 306:	90 91 95 00 	lds	r25, 0x0095
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	90 93 95 00 	sts	0x0095, r25
 310:	80 93 94 00 	sts	0x0094, r24

	of_state = of_state_check_address;
 314:	10 92 dc 00 	sts	0x00DC, r1
	ss_state = ss_state_after_start;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 db 00 	sts	0x00DB, r24

	USIDR = 0xff;
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	8f b9       	out	0x0f, r24	; 15

	USICR =
 322:	88 ef       	ldi	r24, 0xF8	; 248
 324:	8d b9       	out	0x0d, r24	; 13
		(1 << USIOIE) |									// enable overflow interrupt
		(1 << USIWM1) | (1 << USIWM0) |					// set usi in two-wire mode, enable bit counter overflow hold
		(1 << USICS1) | (0 << USICS0) | (0 << USICLK) |	// shift register clock source = external, positive edge, 4-bit counter source = external, both edges
		(0 << USITC);									// don't toggle clock-port pin

	USISR =
 326:	80 ed       	ldi	r24, 0xD0	; 208
 328:	8e b9       	out	0x0e, r24	; 14
		(1		<< USISIF)	|		// clear start condition flag
		(1		<< USIOIF)	|		// clear overflow condition flag
		(0		<< USIPF)	|		// !clear stop condition flag
		(1		<< USIDC)	|		// clear arbitration error flag
		(0x00	<< USICNT0);		// set counter to "8" bits
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <__vector_16>:

ISR(USI_OVERFLOW_VECTOR)
{
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	// bit shift register overflow condition occured
	// scl forced low until overflow condition is cleared!

	uint8_t data		= USIDR;
 36e:	9f b1       	in	r25, 0x0f	; 15
	uint8_t set_counter = 0x00;		// send 8 bits (16 edges)

	if(stats_enabled)
 370:	80 91 96 00 	lds	r24, 0x0096
 374:	88 23       	and	r24, r24
 376:	51 f0       	breq	.+20     	; 0x38c <__vector_16+0x40>
		overflow_conditions_count++;
 378:	20 91 8e 00 	lds	r18, 0x008E
 37c:	30 91 8f 00 	lds	r19, 0x008F
 380:	2f 5f       	subi	r18, 0xFF	; 255
 382:	3f 4f       	sbci	r19, 0xFF	; 255
 384:	30 93 8f 00 	sts	0x008F, r19
 388:	20 93 8e 00 	sts	0x008E, r18
 38c:	80 91 dc 00 	lds	r24, 0x00DC

again:
	switch(of_state)
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	09 f4       	brne	.+2      	; 0x396 <__vector_16+0x4a>
 394:	47 c0       	rjmp	.+142    	; 0x424 <__vector_16+0xd8>
 396:	28 f4       	brcc	.+10     	; 0x3a2 <__vector_16+0x56>
 398:	88 23       	and	r24, r24
 39a:	71 f0       	breq	.+28     	; 0x3b8 <__vector_16+0x6c>
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	49 f4       	brne	.+18     	; 0x3b2 <__vector_16+0x66>
 3a0:	28 c0       	rjmp	.+80     	; 0x3f2 <__vector_16+0xa6>
 3a2:	84 30       	cpi	r24, 0x04	; 4
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <__vector_16+0x5c>
 3a6:	4a c0       	rjmp	.+148    	; 0x43c <__vector_16+0xf0>
 3a8:	08 f4       	brcc	.+2      	; 0x3ac <__vector_16+0x60>
 3aa:	42 c0       	rjmp	.+132    	; 0x430 <__vector_16+0xe4>
 3ac:	85 30       	cpi	r24, 0x05	; 5
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <__vector_16+0x66>
 3b0:	4c c0       	rjmp	.+152    	; 0x44a <__vector_16+0xfe>
 3b2:	80 93 dc 00 	sts	0x00DC, r24
 3b6:	1b c0       	rjmp	.+54     	; 0x3ee <__vector_16+0xa2>
 3b8:	10 92 dc 00 	sts	0x00DC, r1
			uint8_t direction;

			direction	= data & 0x01;
			address		= (data & 0xfe) >> 1;

			if(address == slave_address)
 3bc:	20 91 da 00 	lds	r18, 0x00DA
 3c0:	89 2f       	mov	r24, r25
 3c2:	86 95       	lsr	r24
 3c4:	82 13       	cpse	r24, r18
 3c6:	0b c0       	rjmp	.+22     	; 0x3de <__vector_16+0x92>
			{
				ss_state = ss_state_address_selected;
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	80 93 db 00 	sts	0x00DB, r24

	/*PORTA ^= (1<<7);        //Use xor to toggle the LED*/
				if(direction)					// read request from master
 3ce:	90 ff       	sbrs	r25, 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <__vector_16+0x8a>
					of_state = of_state_send_data;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <__vector_16+0x8c>
				else							// write request from master
					of_state = of_state_receive_data;
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	80 93 dc 00 	sts	0x00DC, r24
 3dc:	45 c0       	rjmp	.+138    	; 0x468 <__vector_16+0x11c>
				set_counter = 0x0e;				// send 1 bit (2 edges)
				set_sda_to_output();			// initiate send ack
			}
			else
			{
				USIDR		= 0x00;
 3de:	1f b8       	out	0x0f, r1	; 15
	PORT_USI |= _BV(PORT_USI_SCL);
}

static inline void twi_reset_state(void)
{
	USISR =
 3e0:	80 ed       	ldi	r24, 0xD0	; 208
 3e2:	8e b9       	out	0x0e, r24	; 14
		(1		<< USIOIF)	|		// clear overflow condition flag
		(0		<< USIPF)	|		// !clear stop condition flag
		(1		<< USIDC)	|		// clear arbitration error flag
		(0x00	<< USICNT0);		// set counter to "8" bits

	USICR =
 3e4:	88 ea       	ldi	r24, 0xA8	; 168
 3e6:	8d b9       	out	0x0d, r24	; 13
			else
			{
				USIDR		= 0x00;
				set_counter = 0x00;
				twi_reset_state();
				ss_state = ss_state_address_not_selected;
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	80 93 db 00 	sts	0x00DB, r24
				set_sda_to_output();			// initiate send ack
			}
			else
			{
				USIDR		= 0x00;
				set_counter = 0x00;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	3e c0       	rjmp	.+124    	; 0x46e <__vector_16+0x122>

		// process read request from master

		case(of_state_send_data):
		{
			ss_state = ss_state_data_processed;
 3f2:	84 e0       	ldi	r24, 0x04	; 4
 3f4:	80 93 db 00 	sts	0x00DB, r24
			of_state = of_state_request_ack;
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	80 93 dc 00 	sts	0x00DC, r24

			if(output_buffer_current < output_buffer_length)
 3fe:	e0 91 97 00 	lds	r30, 0x0097
 402:	80 91 98 00 	lds	r24, 0x0098
 406:	e8 17       	cp	r30, r24
 408:	50 f4       	brcc	.+20     	; 0x41e <__vector_16+0xd2>
				USIDR = output_buffer[output_buffer_current++];
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	8e 0f       	add	r24, r30
 40e:	80 93 97 00 	sts	0x0097, r24
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	e7 56       	subi	r30, 0x67	; 103
 416:	ff 4f       	sbci	r31, 0xFF	; 255
 418:	80 81       	ld	r24, Z
 41a:	8f b9       	out	0x0f, r24	; 15
 41c:	01 c0       	rjmp	.+2      	; 0x420 <__vector_16+0xd4>
			else
				USIDR = 0x00;					// no more data, but cannot send "nothing" or "nak"
 41e:	1f b8       	out	0x0f, r1	; 15

			set_counter = 0x00;
			set_sda_to_output();				// initiate send data
 420:	34 df       	rcall	.-408    	; 0x28a <set_sda_to_output>
 422:	e5 cf       	rjmp	.-54     	; 0x3ee <__vector_16+0xa2>

		// data sent to master, request ack (or nack) from master

		case(of_state_request_ack):
		{
			of_state = of_state_check_ack;
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	80 93 dc 00 	sts	0x00DC, r24

			USIDR		= 0x00;
 42a:	1f b8       	out	0x0f, r1	; 15
			set_counter = 0x0e;					//	receive 1 bit (2 edges)
			set_sda_to_input();					//	initiate receive ack
 42c:	2c df       	rcall	.-424    	; 0x286 <set_sda_to_input>
 42e:	1e c0       	rjmp	.+60     	; 0x46c <__vector_16+0x120>

		// ack/nack from master received

		case(of_state_check_ack):
		{
			if(data)	// if NACK, the master does not want more data
 430:	99 23       	and	r25, r25
 432:	f9 f2       	breq	.-66     	; 0x3f2 <__vector_16+0xa6>
			{
				of_state = of_state_check_address;
 434:	10 92 dc 00 	sts	0x00DC, r1
				set_counter = 0x00;
				twi_reset();
 438:	2a df       	rcall	.-428    	; 0x28e <twi_reset>
 43a:	d9 cf       	rjmp	.-78     	; 0x3ee <__vector_16+0xa2>

		// process write request from master

		case(of_state_receive_data):
		{
			ss_state = ss_state_data_processed;
 43c:	80 93 db 00 	sts	0x00DB, r24

			of_state = of_state_store_data_and_send_ack;
 440:	85 e0       	ldi	r24, 0x05	; 5
 442:	80 93 dc 00 	sts	0x00DC, r24

			set_counter = 0x00;					// receive 1 bit (2 edges)
			set_sda_to_input();					// initiate receive data
 446:	1f df       	rcall	.-450    	; 0x286 <set_sda_to_input>
 448:	d2 cf       	rjmp	.-92     	; 0x3ee <__vector_16+0xa2>

		// data received from master, store it and wait for more data

		case(of_state_store_data_and_send_ack):
		{
			of_state = of_state_receive_data;
 44a:	84 e0       	ldi	r24, 0x04	; 4
 44c:	80 93 dc 00 	sts	0x00DC, r24

			if(input_buffer_length < (USI_TWI_BUFFER_SIZE - 1))
 450:	e0 91 b9 00 	lds	r30, 0x00B9
 454:	ef 31       	cpi	r30, 0x1F	; 31
 456:	40 f4       	brcc	.+16     	; 0x468 <__vector_16+0x11c>
				input_buffer[input_buffer_length++] = data;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	8e 0f       	add	r24, r30
 45c:	80 93 b9 00 	sts	0x00B9, r24
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	e6 54       	subi	r30, 0x46	; 70
 464:	ff 4f       	sbci	r31, 0xFF	; 255
 466:	90 83       	st	Z, r25

			USIDR		= 0x00;
 468:	1f b8       	out	0x0f, r1	; 15
			set_counter = 0x0e;					// send 1 bit (2 edges)
			set_sda_to_output();				// initiate send ack
 46a:	0f df       	rcall	.-482    	; 0x28a <set_sda_to_output>

			if(input_buffer_length < (USI_TWI_BUFFER_SIZE - 1))
				input_buffer[input_buffer_length++] = data;

			USIDR		= 0x00;
			set_counter = 0x0e;					// send 1 bit (2 edges)
 46c:	8e e0       	ldi	r24, 0x0E	; 14

			break;
		}
	}

	USISR =
 46e:	80 65       	ori	r24, 0x50	; 80
 470:	8e b9       	out	0x0e, r24	; 14
		(0				<< USISIF)	|		// don't clear start condition flag
		(1				<< USIOIF)	|		// clear overflow condition flag
		(0				<< USIPF)	|		// don't clear stop condition flag
		(1				<< USIDC)	|		// clear arbitration error flag
		(set_counter	<< USICNT0);		// set counter to 8 or 1 bits
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <usi_twi_slave>:

void usi_twi_slave(uint8_t slave_address_in, uint8_t use_sleep,
			void (*data_callback_in)(volatile uint8_t *input_buffer_length, volatile const uint8_t *input_buffer,
			volatile uint8_t *output_buffer_length, volatile uint8_t *output_buffer),
			void (*idle_callback_in)(void))
{
 494:	c6 2f       	mov	r28, r22
	uint8_t	call_datacallback = 0;

	slave_address			= slave_address_in;
 496:	80 93 da 00 	sts	0x00DA, r24
	data_callback			= data_callback_in;
 49a:	50 93 de 00 	sts	0x00DE, r21
 49e:	40 93 dd 00 	sts	0x00DD, r20
	idle_callback			= idle_callback_in;
 4a2:	30 93 e0 00 	sts	0x00E0, r19
 4a6:	20 93 df 00 	sts	0x00DF, r18

	input_buffer_length		= 0;
 4aa:	10 92 b9 00 	sts	0x00B9, r1
	output_buffer_length	= 0;
 4ae:	10 92 98 00 	sts	0x0098, r1
	output_buffer_current	= 0;
 4b2:	10 92 97 00 	sts	0x0097, r1
	ss_state				= ss_state_before_start;
 4b6:	10 92 db 00 	sts	0x00DB, r1

	if(use_sleep)
 4ba:	66 23       	and	r22, r22
 4bc:	19 f0       	breq	.+6      	; 0x4c4 <usi_twi_slave+0x30>
		set_sleep_mode(SLEEP_MODE_IDLE);
 4be:	85 b7       	in	r24, 0x35	; 53
 4c0:	87 7e       	andi	r24, 0xE7	; 231
 4c2:	85 bf       	out	0x35, r24	; 53
#else
	USIPP &= ~_BV(USIPOS);
# endif
#endif

	twi_reset();
 4c4:	e4 de       	rcall	.-568    	; 0x28e <twi_reset>
	if(use_sleep)
		set_sleep_mode(SLEEP_MODE_IDLE);

	twi_init();

	sei();
 4c6:	78 94       	sei
	for(;;)
	{
		if(idle_callback)
 4c8:	e0 91 df 00 	lds	r30, 0x00DF
 4cc:	f0 91 e0 00 	lds	r31, 0x00E0
 4d0:	30 97       	sbiw	r30, 0x00	; 0
 4d2:	71 f0       	breq	.+28     	; 0x4f0 <usi_twi_slave+0x5c>
		{

			idle_callback();
 4d4:	09 95       	icall

			if(stats_enabled)
 4d6:	80 91 96 00 	lds	r24, 0x0096
 4da:	88 23       	and	r24, r24
 4dc:	49 f0       	breq	.+18     	; 0x4f0 <usi_twi_slave+0x5c>
				idle_call_count++;
 4de:	80 91 8a 00 	lds	r24, 0x008A
 4e2:	90 91 8b 00 	lds	r25, 0x008B
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	90 93 8b 00 	sts	0x008B, r25
 4ec:	80 93 8a 00 	sts	0x008A, r24
		}

		if(use_sleep && (ss_state == ss_state_before_start))
 4f0:	cc 23       	and	r28, r28
 4f2:	59 f0       	breq	.+22     	; 0x50a <usi_twi_slave+0x76>
 4f4:	80 91 db 00 	lds	r24, 0x00DB
 4f8:	81 11       	cpse	r24, r1
 4fa:	07 c0       	rjmp	.+14     	; 0x50a <usi_twi_slave+0x76>
			sleep_mode();
 4fc:	85 b7       	in	r24, 0x35	; 53
 4fe:	80 62       	ori	r24, 0x20	; 32
 500:	85 bf       	out	0x35, r24	; 53
 502:	88 95       	sleep
 504:	85 b7       	in	r24, 0x35	; 53
 506:	8f 7d       	andi	r24, 0xDF	; 223
 508:	85 bf       	out	0x35, r24	; 53

		if(USISR & _BV(USIPF))
 50a:	75 9b       	sbis	0x0e, 5	; 14
 50c:	dd cf       	rjmp	.-70     	; 0x4c8 <usi_twi_slave+0x34>
		{
			cli();
 50e:	f8 94       	cli

			if(stats_enabled)
 510:	80 91 96 00 	lds	r24, 0x0096
 514:	88 23       	and	r24, r24
 516:	49 f0       	breq	.+18     	; 0x52a <usi_twi_slave+0x96>
				stop_conditions_count++;
 518:	80 91 92 00 	lds	r24, 0x0092
 51c:	90 91 93 00 	lds	r25, 0x0093
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	90 93 93 00 	sts	0x0093, r25
 526:	80 93 92 00 	sts	0x0092, r24

			USISR |= _BV(USIPF);	// clear stop condition flag
 52a:	75 9a       	sbi	0x0e, 5	; 14

			switch(ss_state)
 52c:	80 91 db 00 	lds	r24, 0x00DB
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	19 f0       	breq	.+6      	; 0x53a <usi_twi_slave+0xa6>
 534:	84 30       	cpi	r24, 0x04	; 4
 536:	19 f0       	breq	.+6      	; 0x53e <usi_twi_slave+0xaa>
 538:	10 c0       	rjmp	.+32     	; 0x55a <usi_twi_slave+0xc6>
			{
				case(ss_state_after_start):
				{
					twi_reset();
 53a:	a9 de       	rcall	.-686    	; 0x28e <twi_reset>
 53c:	0e c0       	rjmp	.+28     	; 0x55a <usi_twi_slave+0xc6>
					break;
				}

				case(ss_state_data_processed):
				{
					if(stats_enabled)
 53e:	80 91 96 00 	lds	r24, 0x0096
 542:	88 23       	and	r24, r24
 544:	61 f0       	breq	.+24     	; 0x55e <usi_twi_slave+0xca>
						local_frames_count++;
 546:	80 91 8c 00 	lds	r24, 0x008C
 54a:	90 91 8d 00 	lds	r25, 0x008D
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	90 93 8d 00 	sts	0x008D, r25
 554:	80 93 8c 00 	sts	0x008C, r24
 558:	02 c0       	rjmp	.+4      	; 0x55e <usi_twi_slave+0xca>
			if(stats_enabled)
				stop_conditions_count++;

			USISR |= _BV(USIPF);	// clear stop condition flag

			switch(ss_state)
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	01 c0       	rjmp	.+2      	; 0x560 <usi_twi_slave+0xcc>
				case(ss_state_data_processed):
				{
					if(stats_enabled)
						local_frames_count++;

					call_datacallback = 1;
 55e:	81 e0       	ldi	r24, 0x01	; 1

					break;
				}
			}

			ss_state = ss_state_before_start;
 560:	10 92 db 00 	sts	0x00DB, r1

			sei();
 564:	78 94       	sei
		}

		if(call_datacallback)
 566:	88 23       	and	r24, r24
 568:	09 f4       	brne	.+2      	; 0x56c <usi_twi_slave+0xd8>
 56a:	ae cf       	rjmp	.-164    	; 0x4c8 <usi_twi_slave+0x34>
		{
			output_buffer_length	= 0;
 56c:	10 92 98 00 	sts	0x0098, r1
			output_buffer_current	= 0;
 570:	10 92 97 00 	sts	0x0097, r1
			data_callback(&input_buffer_length, &input_buffer, &output_buffer_length, &output_buffer);
 574:	e0 91 dd 00 	lds	r30, 0x00DD
 578:	f0 91 de 00 	lds	r31, 0x00DE
 57c:	29 e9       	ldi	r18, 0x99	; 153
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	48 e9       	ldi	r20, 0x98	; 152
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	6a eb       	ldi	r22, 0xBA	; 186
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	89 eb       	ldi	r24, 0xB9	; 185
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	09 95       	icall
			input_buffer_length		= 0;
 58e:	10 92 b9 00 	sts	0x00B9, r1
 592:	9a cf       	rjmp	.-204    	; 0x4c8 <usi_twi_slave+0x34>

00000594 <usi_twi_enable_stats>:
	}
}

void usi_twi_enable_stats(uint8_t onoff)
{
	stats_enabled				= onoff;
 594:	80 93 96 00 	sts	0x0096, r24
	start_conditions_count		= 0;
 598:	10 92 95 00 	sts	0x0095, r1
 59c:	10 92 94 00 	sts	0x0094, r1
	stop_conditions_count		= 0;
 5a0:	10 92 93 00 	sts	0x0093, r1
 5a4:	10 92 92 00 	sts	0x0092, r1
	error_conditions_count		= 0;
 5a8:	10 92 91 00 	sts	0x0091, r1
 5ac:	10 92 90 00 	sts	0x0090, r1
	overflow_conditions_count	= 0;
 5b0:	10 92 8f 00 	sts	0x008F, r1
 5b4:	10 92 8e 00 	sts	0x008E, r1
	local_frames_count			= 0;
 5b8:	10 92 8d 00 	sts	0x008D, r1
 5bc:	10 92 8c 00 	sts	0x008C, r1
	idle_call_count				= 0;
 5c0:	10 92 8b 00 	sts	0x008B, r1
 5c4:	10 92 8a 00 	sts	0x008A, r1
 5c8:	08 95       	ret

000005ca <usi_twi_stats_start_conditions>:
}

uint16_t usi_twi_stats_start_conditions(void)
{
	return(start_conditions_count);
}
 5ca:	80 91 94 00 	lds	r24, 0x0094
 5ce:	90 91 95 00 	lds	r25, 0x0095
 5d2:	08 95       	ret

000005d4 <usi_twi_stats_stop_conditions>:

uint16_t usi_twi_stats_stop_conditions(void)
{
	return(stop_conditions_count);
}
 5d4:	80 91 92 00 	lds	r24, 0x0092
 5d8:	90 91 93 00 	lds	r25, 0x0093
 5dc:	08 95       	ret

000005de <usi_twi_stats_error_conditions>:

uint16_t usi_twi_stats_error_conditions(void)
{
	return(error_conditions_count);
}
 5de:	80 91 90 00 	lds	r24, 0x0090
 5e2:	90 91 91 00 	lds	r25, 0x0091
 5e6:	08 95       	ret

000005e8 <usi_twi_stats_overflow_conditions>:

uint16_t usi_twi_stats_overflow_conditions(void)
{
	return(overflow_conditions_count);
}
 5e8:	80 91 8e 00 	lds	r24, 0x008E
 5ec:	90 91 8f 00 	lds	r25, 0x008F
 5f0:	08 95       	ret

000005f2 <usi_twi_stats_local_frames>:

uint16_t usi_twi_stats_local_frames(void)
{
	return(local_frames_count);
}
 5f2:	80 91 8c 00 	lds	r24, 0x008C
 5f6:	90 91 8d 00 	lds	r25, 0x008D
 5fa:	08 95       	ret

000005fc <usi_twi_stats_idle_calls>:
 5fc:	80 91 8a 00 	lds	r24, 0x008A
 600:	90 91 8b 00 	lds	r25, 0x008B
 604:	08 95       	ret

00000606 <main>:
	/*DDRB |= (1<<i);     //Set PortD Pin0 as an output*/
	/*DDRA |= (1<<i);     //Set PortD Pin0 as an output*/
	/*PORTB |= (1<<i);        //Set PortD Pin0 high to turn on LED*/
	/*PORTA |= (1<<i);        //Set PortD Pin0 high to turn on LED*/
	/*}*/
	DDRB |= (1<<2) | 1;
 606:	87 b3       	in	r24, 0x17	; 23
 608:	85 60       	ori	r24, 0x05	; 5
 60a:	87 bb       	out	0x17, r24	; 23
	DDRA |= (1<<7);
 60c:	d7 9a       	sbi	0x1a, 7	; 26
	measCur();
 60e:	90 dd       	rcall	.-1248   	; 0x130 <measCur>
	measVin();	
 610:	77 dd       	rcall	.-1298   	; 0x100 <measVin>
	// Set PTB0 to 0 to enable power save. 
	/*PORTB &= ~(1<<0);*/
	cwSend("AB1TJ", 5);
 612:	65 e0       	ldi	r22, 0x05	; 5
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	84 e8       	ldi	r24, 0x84	; 132
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	d1 dd       	rcall	.-1118   	; 0x1be <cwSend>

	/*PORTB ^= (1<<2);*/
	//Setup the clock
	TCCR1B |= (1 << WGM12) | 1<<CS11 | 1<<CS10;  //Divide by 64
 61c:	8e b5       	in	r24, 0x2e	; 46
 61e:	8b 60       	ori	r24, 0x0B	; 11
 620:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 5000;        //Count 15624 cycles for 1 second interrupt
 622:	88 e8       	ldi	r24, 0x88	; 136
 624:	93 e1       	ldi	r25, 0x13	; 19
 626:	9b bd       	out	0x2b, r25	; 43
 628:	8a bd       	out	0x2a, r24	; 42
	/*OCR1A = 15624;        //Count 15624 cycles for 1 second interrupt*/
	TIMSK1 |= 1<<OCIE1A;        //enable timer compare interrupt
 62a:	61 9a       	sbi	0x0c, 1	; 12
	sei();            //Enable global interrupts
 62c:	78 94       	sei

	usi_twi_slave(0x68, 1, twi_callback, 0);
 62e:	20 e0       	ldi	r18, 0x00	; 0
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	4d e2       	ldi	r20, 0x2D	; 45
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	88 e6       	ldi	r24, 0x68	; 104
 63a:	2c df       	rcall	.-424    	; 0x494 <usi_twi_slave>

	cwSend("AB1TJ", 5);
 63c:	65 e0       	ldi	r22, 0x05	; 5
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	84 e8       	ldi	r24, 0x84	; 132
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	bc dd       	rcall	.-1160   	; 0x1be <cwSend>
	for(;;){
		if (*i2cInLen){
 646:	e0 91 e5 00 	lds	r30, 0x00E5
 64a:	f0 91 e6 00 	lds	r31, 0x00E6
 64e:	80 81       	ld	r24, Z

		}
	}
 650:	fe cf       	rjmp	.-4      	; 0x64e <main+0x48>

00000652 <_exit>:
 652:	f8 94       	cli

00000654 <__stop_program>:
 654:	ff cf       	rjmp	.-2      	; 0x654 <__stop_program>
