
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000065e  000006f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  0080008a  0080008a  0000071c  2**0
                  ALLOC
  3 .stab         00001b48  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ad  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003711  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003724  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000420  00000000  00000000  00003760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003e8  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00003f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000176  00000000  00000000  00003f85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	9e c0       	rjmp	.+316    	; 0x14a <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	4a c1       	rjmp	.+660    	; 0x2b4 <__vector_15>
  20:	99 c1       	rjmp	.+818    	; 0x354 <__vector_16>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ee e5       	ldi	r30, 0x5E	; 94
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 38       	cpi	r26, 0x8A	; 138
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	aa e8       	ldi	r26, 0x8A	; 138
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a1 3f       	cpi	r26, 0xF1	; 241
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	db d2       	rcall	.+1462   	; 0x60c <main>
  56:	01 c3       	rjmp	.+1538   	; 0x65a <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <twi_callback>:



void twi_callback(volatile uint8_t *input_buffer_length, 
		volatile const uint8_t *input_buffer, volatile uint8_t *output_buffer_length, 
		volatile uint8_t *output_buffer) {
  5a:	f9 01       	movw	r30, r18
	/*PORTB ^= (1<<2);        //Use xor to toggle the LED*/
	i2cOutLen = output_buffer_length;
  5c:	50 93 e4 00 	sts	0x00E4, r21
  60:	40 93 e3 00 	sts	0x00E3, r20
	i2cOutBuf = output_buffer;
  64:	30 93 ee 00 	sts	0x00EE, r19
  68:	20 93 ed 00 	sts	0x00ED, r18
	i2cInLen = input_buffer_length;
  6c:	90 93 e6 00 	sts	0x00E6, r25
  70:	80 93 e5 00 	sts	0x00E5, r24
	i2cInBuf = input_buffer;
  74:	70 93 e2 00 	sts	0x00E2, r23
  78:	60 93 e1 00 	sts	0x00E1, r22
			switch (*i2cInBuf){
  7c:	db 01       	movw	r26, r22
  7e:	8c 91       	ld	r24, X
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	d9 f0       	breq	.+54     	; 0xba <twi_callback+0x60>
  84:	84 30       	cpi	r24, 0x04	; 4
  86:	19 f1       	breq	.+70     	; 0xce <twi_callback+0x74>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	89 f5       	brne	.+98     	; 0xee <twi_callback+0x94>
						break;
					}
				case (2):
					{
						// Voltage request. 
						i2cOutBuf[0] = v[0]++;
  8c:	90 91 e9 00 	lds	r25, 0x00E9
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	29 0f       	add	r18, r25
  94:	20 93 e9 00 	sts	0x00E9, r18
  98:	90 83       	st	Z, r25
						i2cOutBuf[1] = v[1]++;
  9a:	e0 91 ed 00 	lds	r30, 0x00ED
  9e:	f0 91 ee 00 	lds	r31, 0x00EE
  a2:	90 91 ea 00 	lds	r25, 0x00EA
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	29 0f       	add	r18, r25
  aa:	20 93 ea 00 	sts	0x00EA, r18
  ae:	91 83       	std	Z+1, r25	; 0x01
						*i2cOutLen = 2;
  b0:	e0 91 e3 00 	lds	r30, 0x00E3
  b4:	f0 91 e4 00 	lds	r31, 0x00E4
  b8:	19 c0       	rjmp	.+50     	; 0xec <twi_callback+0x92>
						break;
					}
				case (3):
					{
						i2cOutBuf[0] = cur[0];
  ba:	80 91 eb 00 	lds	r24, 0x00EB
  be:	80 83       	st	Z, r24
						i2cOutBuf[1] = cur[1];
  c0:	e0 91 ed 00 	lds	r30, 0x00ED
  c4:	f0 91 ee 00 	lds	r31, 0x00EE
  c8:	80 91 ec 00 	lds	r24, 0x00EC
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <twi_callback+0x86>
						*i2cOutLen = 2;
						break;
					}
				case (4):
					{
						i2cOutBuf[0] = temp[0];
  ce:	80 91 e7 00 	lds	r24, 0x00E7
  d2:	80 83       	st	Z, r24
						i2cOutBuf[1] = temp[1];
  d4:	e0 91 ed 00 	lds	r30, 0x00ED
  d8:	f0 91 ee 00 	lds	r31, 0x00EE
  dc:	80 91 e8 00 	lds	r24, 0x00E8
  e0:	81 83       	std	Z+1, r24	; 0x01
						*i2cOutLen = 2;
  e2:	e0 91 e3 00 	lds	r30, 0x00E3
  e6:	f0 91 e4 00 	lds	r31, 0x00E4
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <adcVinInit>:


void adcVinInit(void){
	// For right now, will set up for single ended, battery voltage measurement. 
	//
	PRR &= ~(1 << PRADC);
  f0:	00 98       	cbi	0x00, 0	; 0
	ADCSRA &= ~(1 << ADEN);
  f2:	37 98       	cbi	0x06, 7	; 6
	ADMUX = 0;
  f4:	17 b8       	out	0x07, r1	; 7

	ADCSRB = (1 << ADLAR) ;
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	83 b9       	out	0x03, r24	; 3
	ADCSRA = (0x6) | (1 << ADEN);
  fa:	86 e8       	ldi	r24, 0x86	; 134
  fc:	86 b9       	out	0x06, r24	; 6
  fe:	08 95       	ret

00000100 <measVin>:
}
int measVin(void) {
	int temp;
	while ( ADCSRA & (1 << ADSC));
 100:	36 99       	sbic	0x06, 6	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <measVin>
	adcVinInit();
 104:	f5 df       	rcall	.-22     	; 0xf0 <adcVinInit>
	ADCSRA |= (1 << ADSC);
 106:	36 9a       	sbi	0x06, 6	; 6
	while ( ADCSRA & (1 << ADSC));
 108:	36 99       	sbic	0x06, 6	; 6
 10a:	fe cf       	rjmp	.-4      	; 0x108 <measVin+0x8>
	/*v[0] = ADCH;*/
	/*v[1] = ADCL;*/
	if (v[0] == 0x00){
 10c:	80 91 e9 00 	lds	r24, 0x00E9
 110:	81 11       	cpse	r24, r1
 112:	04 c0       	rjmp	.+8      	; 0x11c <measVin+0x1c>
		PORTB ^= (1<<2);        //Use xor to toggle the LED
 114:	98 b3       	in	r25, 0x18	; 24
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	89 27       	eor	r24, r25
 11a:	88 bb       	out	0x18, r24	; 24
	}
}
 11c:	08 95       	ret

0000011e <adcCurInit>:
void adcCurInit(void){
	// For right now, will set up for single ended, battery voltage measurement. 
	// PA1 is pos
	// PA2 is neg
	//
	PRR &= ~(1 << PRADC);
 11e:	00 98       	cbi	0x00, 0	; 0
	ADCSRA &= ~(1 << ADEN);
 120:	37 98       	cbi	0x06, 7	; 6
	ADMUX = 0x0d;
 122:	8d e0       	ldi	r24, 0x0D	; 13
 124:	87 b9       	out	0x07, r24	; 7

	ADCSRB = (1 << ADLAR) ;
 126:	80 e1       	ldi	r24, 0x10	; 16
 128:	83 b9       	out	0x03, r24	; 3
	ADCSRA = (0x6) | (1 << ADEN);
 12a:	86 e8       	ldi	r24, 0x86	; 134
 12c:	86 b9       	out	0x06, r24	; 6
 12e:	08 95       	ret

00000130 <measCur>:
}
int measCur(void) {
	int temp;
	while ( ADCSRA & (1 << ADSC));
 130:	36 99       	sbic	0x06, 6	; 6
 132:	fe cf       	rjmp	.-4      	; 0x130 <measCur>
	adcCurInit();
 134:	f4 df       	rcall	.-24     	; 0x11e <adcCurInit>
	ADCSRA |= (1 << ADSC);
 136:	36 9a       	sbi	0x06, 6	; 6
	while ( ADCSRA & (1 << ADSC));
 138:	36 99       	sbic	0x06, 6	; 6
 13a:	fe cf       	rjmp	.-4      	; 0x138 <measCur+0x8>
	cur[0] = ADCH;
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	80 93 eb 00 	sts	0x00EB, r24
	cur[1] = ADCL;
 142:	84 b1       	in	r24, 0x04	; 4
 144:	80 93 ec 00 	sts	0x00EC, r24
}
 148:	08 95       	ret

0000014a <__vector_6>:
		}
	}
}

ISR (TIM1_COMPA_vect)      //Interrupt Service Routine
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	PORTA ^= (1<<7);        //Use xor to toggle the LED
 16c:	8b b3       	in	r24, 0x1b	; 27
 16e:	80 58       	subi	r24, 0x80	; 128
 170:	8b bb       	out	0x1b, r24	; 27
	PORTB ^= (1<<2);        //Use xor to toggle the LED
 172:	98 b3       	in	r25, 0x18	; 24
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	89 27       	eor	r24, r25
 178:	88 bb       	out	0x18, r24	; 24
	measCur();
 17a:	da df       	rcall	.-76     	; 0x130 <measCur>
	measVin();	
 17c:	c1 df       	rcall	.-126    	; 0x100 <measVin>
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <cwTone>:
	0xA1,
	};


void cwTone(char DitOrDah){
	LED1_On();		
 1a0:	df 9a       	sbi	0x1b, 7	; 27
	if (DitOrDah == 0) {
 1a2:	81 11       	cpse	r24, r1
 1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <cwTone+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	2f e5       	ldi	r18, 0x5F	; 95
 1a8:	8a ee       	ldi	r24, 0xEA	; 234
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <cwTone+0xc>
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <cwTone+0x1e>
 1b6:	87 ea       	ldi	r24, 0xA7	; 167
 1b8:	91 e6       	ldi	r25, 0x61	; 97
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <cwTone+0x1a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <cwTone+0x20>
 1c0:	00 00       	nop
		/* Then we have a dah, 0 and all. `==*/ 
		_delay_ms(DAHTIME);
	} else {
		_delay_ms(DITTIME);
	}
	LED1_Off();	
 1c2:	df 98       	cbi	0x1b, 7	; 27
 1c4:	08 95       	ret

000001c6 <cwSend>:
}
char cwSend(char* data, int len){
 1c6:	af 92       	push	r10
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	7c 01       	movw	r14, r24
	char currChar;
	char* cwDataPtr;
	char currBit;
	
	cwDataPtr = data;
	while((data+len) > cwDataPtr){
 1dc:	ec 01       	movw	r28, r24
 1de:	c6 0f       	add	r28, r22
 1e0:	d7 1f       	adc	r29, r23
		}

		charLen = (currChar >> 5); /* This is the length of the morse code char, in the top 3 bits*/ 
		currBit = 0;
		while ( charLen > 0 ){
			cwTone((currChar & ( 0x80 >> (3+currBit))));
 1e2:	00 e8       	ldi	r16, 0x80	; 128
 1e4:	10 e0       	ldi	r17, 0x00	; 0
	char currChar;
	char* cwDataPtr;
	char currBit;
	
	cwDataPtr = data;
	while((data+len) > cwDataPtr){
 1e6:	ec 16       	cp	r14, r28
 1e8:	fd 06       	cpc	r15, r29
 1ea:	e8 f5       	brcc	.+122    	; 0x266 <__stack+0x7>
		currChar = *cwDataPtr;
 1ec:	d7 01       	movw	r26, r14
 1ee:	ed 91       	ld	r30, X+
 1f0:	7d 01       	movw	r14, r26
		if (currChar >= 'A' && currChar <= 'Z'){
 1f2:	8f eb       	ldi	r24, 0xBF	; 191
 1f4:	8e 0f       	add	r24, r30
 1f6:	8a 31       	cpi	r24, 0x1A	; 26
 1f8:	20 f4       	brcc	.+8      	; 0x202 <cwSend+0x3c>
			currChar = CwLetterData[currChar - 'A']; /* This sets the current char to the morse binary representation of the letter if it is a letter. */ 
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e7 5d       	subi	r30, 0xD7	; 215
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	07 c0       	rjmp	.+14     	; 0x210 <cwSend+0x4a>
		} else if (currChar >= '0' && currChar <= '9'){
 202:	80 ed       	ldi	r24, 0xD0	; 208
 204:	8e 0f       	add	r24, r30
 206:	8a 30       	cpi	r24, 0x0A	; 10
 208:	28 f4       	brcc	.+10     	; 0x214 <cwSend+0x4e>
			currChar = CwNumberData[currChar - '0'];
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e0 5d       	subi	r30, 0xD0	; 208
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	d0 80       	ld	r13, Z
 212:	01 c0       	rjmp	.+2      	; 0x216 <cwSend+0x50>
		} else {
			currChar = 0;  /* Because I dont know what to do...*/ 
 214:	d1 2c       	mov	r13, r1
		}

		charLen = (currChar >> 5); /* This is the length of the morse code char, in the top 3 bits*/ 
 216:	cd 2c       	mov	r12, r13
 218:	c2 94       	swap	r12
 21a:	c6 94       	lsr	r12
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	c8 22       	and	r12, r24
		currBit = 0;
		while ( charLen > 0 ){
 220:	93 e0       	ldi	r25, 0x03	; 3
 222:	a9 2e       	mov	r10, r25
 224:	b1 2c       	mov	r11, r1
 226:	cc 20       	and	r12, r12
 228:	a1 f0       	breq	.+40     	; 0x252 <cwSend+0x8c>
			cwTone((currChar & ( 0x80 >> (3+currBit))));
 22a:	c8 01       	movw	r24, r16
 22c:	0a 2c       	mov	r0, r10
 22e:	02 c0       	rjmp	.+4      	; 0x234 <cwSend+0x6e>
 230:	95 95       	asr	r25
 232:	87 95       	ror	r24
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <cwSend+0x6a>
 238:	8d 21       	and	r24, r13
 23a:	b2 df       	rcall	.-156    	; 0x1a0 <cwTone>
 23c:	87 ea       	ldi	r24, 0xA7	; 167
 23e:	91 e6       	ldi	r25, 0x61	; 97
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <cwSend+0x7a>
 244:	00 c0       	rjmp	.+0      	; 0x246 <cwSend+0x80>
 246:	00 00       	nop
			/* A little bit crazy, passes to the sender, the current bit. Ands the current morse byte with a shifted 1  to get the current character*/ 
			_delay_ms(DITTIME);
			charLen--;
 248:	ca 94       	dec	r12
 24a:	9f ef       	ldi	r25, 0xFF	; 255
 24c:	a9 1a       	sub	r10, r25
 24e:	b9 0a       	sbc	r11, r25
 250:	ea cf       	rjmp	.-44     	; 0x226 <cwSend+0x60>
 252:	af e5       	ldi	r26, 0x5F	; 95
 254:	ba ee       	ldi	r27, 0xEA	; 234
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	a1 50       	subi	r26, 0x01	; 1
 25a:	b0 40       	sbci	r27, 0x00	; 0
 25c:	20 40       	sbci	r18, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <cwSend+0x92>
 260:	00 c0       	rjmp	.+0      	; 0x262 <__stack+0x3>
 262:	00 00       	nop
 264:	c0 cf       	rjmp	.-128    	; 0x1e6 <cwSend+0x20>
 266:	8f e5       	ldi	r24, 0x5F	; 95
 268:	9a ee       	ldi	r25, 0xEA	; 234
 26a:	a0 e0       	ldi	r26, 0x00	; 0
 26c:	81 50       	subi	r24, 0x01	; 1
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	a0 40       	sbci	r26, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <__stack+0xd>
 274:	00 c0       	rjmp	.+0      	; 0x276 <__stack+0x17>
 276:	00 00       	nop


	}
	_delay_ms(DAHTIME);
	
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	bf 90       	pop	r11
 28a:	af 90       	pop	r10
 28c:	08 95       	ret

0000028e <set_sda_to_input>:
static uint16_t	local_frames_count;
static uint16_t	idle_call_count;

static void set_sda_to_input(void)
{
	DDR_USI &= ~_BV(PORT_USI_SDA);
 28e:	d6 98       	cbi	0x1a, 6	; 26
 290:	08 95       	ret

00000292 <set_sda_to_output>:
}

static void set_sda_to_output(void)
{
	DDR_USI |= _BV(PORT_USI_SDA);
 292:	d6 9a       	sbi	0x1a, 6	; 26
 294:	08 95       	ret

00000296 <twi_reset>:

static void twi_reset(void)
{
	// make sure no sda/scl remains pulled up or down

	set_sda_to_input();		//	deactivate internal pullup on sda/scl
 296:	fb df       	rcall	.-10     	; 0x28e <set_sda_to_input>
	DDR_USI |= _BV(PORT_USI_SCL);
}

static inline void set_sda_low(void)
{
	PORT_USI &= ~_BV(PORT_USI_SDA);
 298:	de 98       	cbi	0x1b, 6	; 27
	DDR_USI |= _BV(PORT_USI_SDA);
}

static inline void set_scl_to_input(void)
{
	DDR_USI &= ~_BV(PORT_USI_SCL);
 29a:	d4 98       	cbi	0x1a, 4	; 26
	PORT_USI |= _BV(PORT_USI_SDA);
}

static inline void set_scl_low(void)
{
	PORT_USI &= ~_BV(PORT_USI_SCL);
 29c:	dc 98       	cbi	0x1b, 4	; 27
	set_sda_to_input();		//	deactivate internal pullup on sda/scl
	set_sda_low();
	set_scl_to_input();
	set_scl_low();

	set_sda_to_output();	//	release (set high) on sda/scl
 29e:	f9 df       	rcall	.-14     	; 0x292 <set_sda_to_output>
	PORT_USI &= ~_BV(PORT_USI_SDA);
}

static inline void set_sda_high(void)
{
	PORT_USI |= _BV(PORT_USI_SDA);
 2a0:	de 9a       	sbi	0x1b, 6	; 27
	set_scl_to_input();
	set_scl_low();

	set_sda_to_output();	//	release (set high) on sda/scl
	set_sda_high();
	set_sda_to_input();
 2a2:	f5 df       	rcall	.-22     	; 0x28e <set_sda_to_input>
	PORT_USI &= ~_BV(PORT_USI_SDA);
}

static inline void set_sda_high(void)
{
	PORT_USI |= _BV(PORT_USI_SDA);
 2a4:	de 9a       	sbi	0x1b, 6	; 27
	DDR_USI &= ~_BV(PORT_USI_SCL);
}

static inline void set_scl_to_output(void)
{
	DDR_USI |= _BV(PORT_USI_SCL);
 2a6:	d4 9a       	sbi	0x1a, 4	; 26
	PORT_USI &= ~_BV(PORT_USI_SCL);
}

static inline void set_scl_high(void)
{
	PORT_USI |= _BV(PORT_USI_SCL);
 2a8:	dc 9a       	sbi	0x1b, 4	; 27
}

static inline void twi_reset_state(void)
{
	USISR =
 2aa:	80 ed       	ldi	r24, 0xD0	; 208
 2ac:	8e b9       	out	0x0e, r24	; 14
		(1		<< USIOIF)	|		// clear overflow condition flag
		(0		<< USIPF)	|		// !clear stop condition flag
		(1		<< USIDC)	|		// clear arbitration error flag
		(0x00	<< USICNT0);		// set counter to "8" bits

	USICR =
 2ae:	88 ea       	ldi	r24, 0xA8	; 168
 2b0:	8d b9       	out	0x0d, r24	; 13
 2b2:	08 95       	ret

000002b4 <__vector_15>:

	twi_reset();
}

ISR(USI_START_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	set_sda_to_input();
 2d6:	db df       	rcall	.-74     	; 0x28e <set_sda_to_input>
	// start detector will hold SCL low) - if a stop condition arises then leave
	// the interrupt to prevent waiting forever - don't use USISR to test for stop
	// condition as in Application Note AVR312 because the stop condition Flag is
	// going to be set from the last TWI sequence

	while(!(PIN_USI & _BV(PIN_USI_SDA)) &&
 2d8:	ce 99       	sbic	0x19, 6	; 25
 2da:	13 c0       	rjmp	.+38     	; 0x302 <__vector_15+0x4e>
 2dc:	cc 9b       	sbis	0x19, 4	; 25
 2de:	11 c0       	rjmp	.+34     	; 0x302 <__vector_15+0x4e>
	//	sda = low	scl = low		break	start condition
	// 	sda = low	scl = high		loop
	//	sda = high	scl = low		break	stop condition
	//	sda = high	scl = high		break	stop condition

	if((PIN_USI & _BV(PIN_USI_SDA)))	// stop condition
 2e0:	ce 9b       	sbis	0x19, 6	; 25
 2e2:	fa cf       	rjmp	.-12     	; 0x2d8 <__vector_15+0x24>
	{
		twi_reset();
 2e4:	d8 df       	rcall	.-80     	; 0x296 <twi_reset>

		if(stats_enabled)
 2e6:	80 91 96 00 	lds	r24, 0x0096
 2ea:	88 23       	and	r24, r24
 2ec:	11 f1       	breq	.+68     	; 0x332 <__vector_15+0x7e>
			error_conditions_count++;
 2ee:	80 91 90 00 	lds	r24, 0x0090
 2f2:	90 91 91 00 	lds	r25, 0x0091
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	90 93 91 00 	sts	0x0091, r25
 2fc:	80 93 90 00 	sts	0x0090, r24
 300:	18 c0       	rjmp	.+48     	; 0x332 <__vector_15+0x7e>
		return;
	}

	if(stats_enabled)
 302:	80 91 96 00 	lds	r24, 0x0096
 306:	88 23       	and	r24, r24
 308:	49 f0       	breq	.+18     	; 0x31c <__vector_15+0x68>
		start_conditions_count++;
 30a:	80 91 94 00 	lds	r24, 0x0094
 30e:	90 91 95 00 	lds	r25, 0x0095
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	90 93 95 00 	sts	0x0095, r25
 318:	80 93 94 00 	sts	0x0094, r24

	of_state = of_state_check_address;
 31c:	10 92 dc 00 	sts	0x00DC, r1
	ss_state = ss_state_after_start;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 db 00 	sts	0x00DB, r24

	USIDR = 0xff;
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	8f b9       	out	0x0f, r24	; 15

	USICR =
 32a:	88 ef       	ldi	r24, 0xF8	; 248
 32c:	8d b9       	out	0x0d, r24	; 13
		(1 << USIOIE) |									// enable overflow interrupt
		(1 << USIWM1) | (1 << USIWM0) |					// set usi in two-wire mode, enable bit counter overflow hold
		(1 << USICS1) | (0 << USICS0) | (0 << USICLK) |	// shift register clock source = external, positive edge, 4-bit counter source = external, both edges
		(0 << USITC);									// don't toggle clock-port pin

	USISR =
 32e:	80 ed       	ldi	r24, 0xD0	; 208
 330:	8e b9       	out	0x0e, r24	; 14
		(1		<< USISIF)	|		// clear start condition flag
		(1		<< USIOIF)	|		// clear overflow condition flag
		(0		<< USIPF)	|		// !clear stop condition flag
		(1		<< USIDC)	|		// clear arbitration error flag
		(0x00	<< USICNT0);		// set counter to "8" bits
}
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_16>:

ISR(USI_OVERFLOW_VECTOR)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	3f 93       	push	r19
 362:	4f 93       	push	r20
 364:	5f 93       	push	r21
 366:	6f 93       	push	r22
 368:	7f 93       	push	r23
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
	// bit shift register overflow condition occured
	// scl forced low until overflow condition is cleared!

	uint8_t data		= USIDR;
 376:	9f b1       	in	r25, 0x0f	; 15
	uint8_t set_counter = 0x00;		// send 8 bits (16 edges)

	if(stats_enabled)
 378:	80 91 96 00 	lds	r24, 0x0096
 37c:	88 23       	and	r24, r24
 37e:	51 f0       	breq	.+20     	; 0x394 <__vector_16+0x40>
		overflow_conditions_count++;
 380:	20 91 8e 00 	lds	r18, 0x008E
 384:	30 91 8f 00 	lds	r19, 0x008F
 388:	2f 5f       	subi	r18, 0xFF	; 255
 38a:	3f 4f       	sbci	r19, 0xFF	; 255
 38c:	30 93 8f 00 	sts	0x008F, r19
 390:	20 93 8e 00 	sts	0x008E, r18

again:
	switch(of_state)
 394:	80 91 dc 00 	lds	r24, 0x00DC
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	09 f4       	brne	.+2      	; 0x39e <__vector_16+0x4a>
 39c:	45 c0       	rjmp	.+138    	; 0x428 <__vector_16+0xd4>
 39e:	30 f4       	brcc	.+12     	; 0x3ac <__vector_16+0x58>
 3a0:	88 23       	and	r24, r24
 3a2:	69 f0       	breq	.+26     	; 0x3be <__vector_16+0x6a>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	09 f0       	breq	.+2      	; 0x3aa <__vector_16+0x56>
 3a8:	64 c0       	rjmp	.+200    	; 0x472 <__vector_16+0x11e>
 3aa:	25 c0       	rjmp	.+74     	; 0x3f6 <__vector_16+0xa2>
 3ac:	84 30       	cpi	r24, 0x04	; 4
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <__vector_16+0x5e>
 3b0:	48 c0       	rjmp	.+144    	; 0x442 <__vector_16+0xee>
 3b2:	08 f4       	brcc	.+2      	; 0x3b6 <__vector_16+0x62>
 3b4:	40 c0       	rjmp	.+128    	; 0x436 <__vector_16+0xe2>
 3b6:	85 30       	cpi	r24, 0x05	; 5
 3b8:	09 f4       	brne	.+2      	; 0x3bc <__vector_16+0x68>
 3ba:	4a c0       	rjmp	.+148    	; 0x450 <__vector_16+0xfc>
 3bc:	5a c0       	rjmp	.+180    	; 0x472 <__vector_16+0x11e>
			uint8_t direction;

			direction	= data & 0x01;
			address		= (data & 0xfe) >> 1;

			if(address == slave_address)
 3be:	20 91 da 00 	lds	r18, 0x00DA
 3c2:	89 2f       	mov	r24, r25
 3c4:	86 95       	lsr	r24
 3c6:	82 13       	cpse	r24, r18
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <__vector_16+0x90>
			{
				ss_state = ss_state_address_selected;
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	80 93 db 00 	sts	0x00DB, r24

	/*PORTA ^= (1<<7);        //Use xor to toggle the LED*/
				if(direction)					// read request from master
 3d0:	90 ff       	sbrs	r25, 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <__vector_16+0x84>
					of_state = of_state_send_data;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <__vector_16+0x86>
				else							// write request from master
					of_state = of_state_receive_data;
 3d8:	84 e0       	ldi	r24, 0x04	; 4
 3da:	80 93 dc 00 	sts	0x00DC, r24

				USIDR		= 0x00;
 3de:	1f b8       	out	0x0f, r1	; 15
				set_counter = 0x0e;				// send 1 bit (2 edges)
				set_sda_to_output();			// initiate send ack
 3e0:	58 df       	rcall	.-336    	; 0x292 <set_sda_to_output>
 3e2:	27 c0       	rjmp	.+78     	; 0x432 <__vector_16+0xde>
			}
			else
			{
				USIDR		= 0x00;
 3e4:	1f b8       	out	0x0f, r1	; 15
	PORT_USI |= _BV(PORT_USI_SCL);
}

static inline void twi_reset_state(void)
{
	USISR =
 3e6:	80 ed       	ldi	r24, 0xD0	; 208
 3e8:	8e b9       	out	0x0e, r24	; 14
		(1		<< USIOIF)	|		// clear overflow condition flag
		(0		<< USIPF)	|		// !clear stop condition flag
		(1		<< USIDC)	|		// clear arbitration error flag
		(0x00	<< USICNT0);		// set counter to "8" bits

	USICR =
 3ea:	88 ea       	ldi	r24, 0xA8	; 168
 3ec:	8d b9       	out	0x0d, r24	; 13
			else
			{
				USIDR		= 0x00;
				set_counter = 0x00;
				twi_reset_state();
				ss_state = ss_state_address_not_selected;
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	80 93 db 00 	sts	0x00DB, r24
 3f4:	3e c0       	rjmp	.+124    	; 0x472 <__vector_16+0x11e>

		// process read request from master

		case(of_state_send_data):
		{
			ss_state = ss_state_data_processed;
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	80 93 db 00 	sts	0x00DB, r24
			of_state = of_state_request_ack;
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	80 93 dc 00 	sts	0x00DC, r24

			if(output_buffer_current < output_buffer_length)
 402:	e0 91 97 00 	lds	r30, 0x0097
 406:	80 91 98 00 	lds	r24, 0x0098
 40a:	e8 17       	cp	r30, r24
 40c:	50 f4       	brcc	.+20     	; 0x422 <__vector_16+0xce>
				USIDR = output_buffer[output_buffer_current++];
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	8e 0f       	add	r24, r30
 412:	80 93 97 00 	sts	0x0097, r24
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	e7 56       	subi	r30, 0x67	; 103
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	80 81       	ld	r24, Z
 41e:	8f b9       	out	0x0f, r24	; 15
 420:	01 c0       	rjmp	.+2      	; 0x424 <__vector_16+0xd0>
			else
				USIDR = 0x00;					// no more data, but cannot send "nothing" or "nak"
 422:	1f b8       	out	0x0f, r1	; 15

			set_counter = 0x00;
			set_sda_to_output();				// initiate send data
 424:	36 df       	rcall	.-404    	; 0x292 <set_sda_to_output>
 426:	25 c0       	rjmp	.+74     	; 0x472 <__vector_16+0x11e>

		// data sent to master, request ack (or nack) from master

		case(of_state_request_ack):
		{
			of_state = of_state_check_ack;
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	80 93 dc 00 	sts	0x00DC, r24

			USIDR		= 0x00;
 42e:	1f b8       	out	0x0f, r1	; 15
			set_counter = 0x0e;					//	receive 1 bit (2 edges)
			set_sda_to_input();					//	initiate receive ack
 430:	2e df       	rcall	.-420    	; 0x28e <set_sda_to_input>
		case(of_state_request_ack):
		{
			of_state = of_state_check_ack;

			USIDR		= 0x00;
			set_counter = 0x0e;					//	receive 1 bit (2 edges)
 432:	8e e0       	ldi	r24, 0x0E	; 14
			set_sda_to_input();					//	initiate receive ack

			break;
 434:	1f c0       	rjmp	.+62     	; 0x474 <__vector_16+0x120>

		// ack/nack from master received

		case(of_state_check_ack):
		{
			if(data)	// if NACK, the master does not want more data
 436:	99 23       	and	r25, r25
 438:	f1 f2       	breq	.-68     	; 0x3f6 <__vector_16+0xa2>
			{
				of_state = of_state_check_address;
 43a:	10 92 dc 00 	sts	0x00DC, r1
				set_counter = 0x00;
				twi_reset();
 43e:	2b df       	rcall	.-426    	; 0x296 <twi_reset>
 440:	18 c0       	rjmp	.+48     	; 0x472 <__vector_16+0x11e>

		// process write request from master

		case(of_state_receive_data):
		{
			ss_state = ss_state_data_processed;
 442:	80 93 db 00 	sts	0x00DB, r24

			of_state = of_state_store_data_and_send_ack;
 446:	85 e0       	ldi	r24, 0x05	; 5
 448:	80 93 dc 00 	sts	0x00DC, r24

			set_counter = 0x00;					// receive 1 bit (2 edges)
			set_sda_to_input();					// initiate receive data
 44c:	20 df       	rcall	.-448    	; 0x28e <set_sda_to_input>
 44e:	11 c0       	rjmp	.+34     	; 0x472 <__vector_16+0x11e>

		// data received from master, store it and wait for more data

		case(of_state_store_data_and_send_ack):
		{
			of_state = of_state_receive_data;
 450:	84 e0       	ldi	r24, 0x04	; 4
 452:	80 93 dc 00 	sts	0x00DC, r24

			if(input_buffer_length < (USI_TWI_BUFFER_SIZE - 1))
 456:	e0 91 b9 00 	lds	r30, 0x00B9
 45a:	ef 31       	cpi	r30, 0x1F	; 31
 45c:	08 f0       	brcs	.+2      	; 0x460 <__vector_16+0x10c>
 45e:	bf cf       	rjmp	.-130    	; 0x3de <__vector_16+0x8a>
				input_buffer[input_buffer_length++] = data;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	8e 0f       	add	r24, r30
 464:	80 93 b9 00 	sts	0x00B9, r24
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	e6 54       	subi	r30, 0x46	; 70
 46c:	ff 4f       	sbci	r31, 0xFF	; 255
 46e:	90 83       	st	Z, r25
 470:	b6 cf       	rjmp	.-148    	; 0x3de <__vector_16+0x8a>
{
	// bit shift register overflow condition occured
	// scl forced low until overflow condition is cleared!

	uint8_t data		= USIDR;
	uint8_t set_counter = 0x00;		// send 8 bits (16 edges)
 472:	80 e0       	ldi	r24, 0x00	; 0

	USISR =
		(0				<< USISIF)	|		// don't clear start condition flag
		(1				<< USIOIF)	|		// clear overflow condition flag
		(0				<< USIPF)	|		// don't clear stop condition flag
		(1				<< USIDC)	|		// clear arbitration error flag
 474:	80 65       	ori	r24, 0x50	; 80

			break;
		}
	}

	USISR =
 476:	8e b9       	out	0x0e, r24	; 14
		(0				<< USISIF)	|		// don't clear start condition flag
		(1				<< USIOIF)	|		// clear overflow condition flag
		(0				<< USIPF)	|		// don't clear stop condition flag
		(1				<< USIDC)	|		// clear arbitration error flag
		(set_counter	<< USICNT0);		// set counter to 8 or 1 bits
}
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <usi_twi_slave>:

void usi_twi_slave(uint8_t slave_address_in, uint8_t use_sleep,
			void (*data_callback_in)(volatile uint8_t *input_buffer_length, volatile const uint8_t *input_buffer,
			volatile uint8_t *output_buffer_length, volatile uint8_t *output_buffer),
			void (*idle_callback_in)(void))
{
 49a:	c6 2f       	mov	r28, r22
	uint8_t	call_datacallback = 0;

	slave_address			= slave_address_in;
 49c:	80 93 da 00 	sts	0x00DA, r24
	data_callback			= data_callback_in;
 4a0:	50 93 de 00 	sts	0x00DE, r21
 4a4:	40 93 dd 00 	sts	0x00DD, r20
	idle_callback			= idle_callback_in;
 4a8:	30 93 e0 00 	sts	0x00E0, r19
 4ac:	20 93 df 00 	sts	0x00DF, r18

	input_buffer_length		= 0;
 4b0:	10 92 b9 00 	sts	0x00B9, r1
	output_buffer_length	= 0;
 4b4:	10 92 98 00 	sts	0x0098, r1
	output_buffer_current	= 0;
 4b8:	10 92 97 00 	sts	0x0097, r1
	ss_state				= ss_state_before_start;
 4bc:	10 92 db 00 	sts	0x00DB, r1

	if(use_sleep)
 4c0:	66 23       	and	r22, r22
 4c2:	19 f0       	breq	.+6      	; 0x4ca <usi_twi_slave+0x30>
		set_sleep_mode(SLEEP_MODE_IDLE);
 4c4:	85 b7       	in	r24, 0x35	; 53
 4c6:	87 7e       	andi	r24, 0xE7	; 231
 4c8:	85 bf       	out	0x35, r24	; 53
#else
	USIPP &= ~_BV(USIPOS);
# endif
#endif

	twi_reset();
 4ca:	e5 de       	rcall	.-566    	; 0x296 <twi_reset>
	if(use_sleep)
		set_sleep_mode(SLEEP_MODE_IDLE);

	twi_init();

	sei();
 4cc:	78 94       	sei
	for(;;)
	{
		if(idle_callback)
 4ce:	e0 91 df 00 	lds	r30, 0x00DF
 4d2:	f0 91 e0 00 	lds	r31, 0x00E0
 4d6:	30 97       	sbiw	r30, 0x00	; 0
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <usi_twi_slave+0x5c>
		{

			idle_callback();
 4da:	09 95       	icall

			if(stats_enabled)
 4dc:	80 91 96 00 	lds	r24, 0x0096
 4e0:	88 23       	and	r24, r24
 4e2:	49 f0       	breq	.+18     	; 0x4f6 <usi_twi_slave+0x5c>
				idle_call_count++;
 4e4:	80 91 8a 00 	lds	r24, 0x008A
 4e8:	90 91 8b 00 	lds	r25, 0x008B
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	90 93 8b 00 	sts	0x008B, r25
 4f2:	80 93 8a 00 	sts	0x008A, r24
		}

		if(use_sleep && (ss_state == ss_state_before_start))
 4f6:	cc 23       	and	r28, r28
 4f8:	59 f0       	breq	.+22     	; 0x510 <usi_twi_slave+0x76>
 4fa:	80 91 db 00 	lds	r24, 0x00DB
 4fe:	81 11       	cpse	r24, r1
 500:	07 c0       	rjmp	.+14     	; 0x510 <usi_twi_slave+0x76>
			sleep_mode();
 502:	85 b7       	in	r24, 0x35	; 53
 504:	80 62       	ori	r24, 0x20	; 32
 506:	85 bf       	out	0x35, r24	; 53
 508:	88 95       	sleep
 50a:	85 b7       	in	r24, 0x35	; 53
 50c:	8f 7d       	andi	r24, 0xDF	; 223
 50e:	85 bf       	out	0x35, r24	; 53

		if(USISR & _BV(USIPF))
 510:	75 9b       	sbis	0x0e, 5	; 14
 512:	dd cf       	rjmp	.-70     	; 0x4ce <usi_twi_slave+0x34>
		{
			cli();
 514:	f8 94       	cli

			if(stats_enabled)
 516:	80 91 96 00 	lds	r24, 0x0096
 51a:	88 23       	and	r24, r24
 51c:	49 f0       	breq	.+18     	; 0x530 <usi_twi_slave+0x96>
				stop_conditions_count++;
 51e:	80 91 92 00 	lds	r24, 0x0092
 522:	90 91 93 00 	lds	r25, 0x0093
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	90 93 93 00 	sts	0x0093, r25
 52c:	80 93 92 00 	sts	0x0092, r24

			USISR |= _BV(USIPF);	// clear stop condition flag
 530:	75 9a       	sbi	0x0e, 5	; 14

			switch(ss_state)
 532:	80 91 db 00 	lds	r24, 0x00DB
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	19 f0       	breq	.+6      	; 0x540 <usi_twi_slave+0xa6>
 53a:	84 30       	cpi	r24, 0x04	; 4
 53c:	19 f0       	breq	.+6      	; 0x544 <usi_twi_slave+0xaa>
 53e:	10 c0       	rjmp	.+32     	; 0x560 <usi_twi_slave+0xc6>
			{
				case(ss_state_after_start):
				{
					twi_reset();
 540:	aa de       	rcall	.-684    	; 0x296 <twi_reset>
 542:	0e c0       	rjmp	.+28     	; 0x560 <usi_twi_slave+0xc6>
					break;
				}

				case(ss_state_data_processed):
				{
					if(stats_enabled)
 544:	80 91 96 00 	lds	r24, 0x0096
 548:	88 23       	and	r24, r24
 54a:	61 f0       	breq	.+24     	; 0x564 <usi_twi_slave+0xca>
						local_frames_count++;
 54c:	80 91 8c 00 	lds	r24, 0x008C
 550:	90 91 8d 00 	lds	r25, 0x008D
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	90 93 8d 00 	sts	0x008D, r25
 55a:	80 93 8c 00 	sts	0x008C, r24
 55e:	02 c0       	rjmp	.+4      	; 0x564 <usi_twi_slave+0xca>
			if(stats_enabled)
				stop_conditions_count++;

			USISR |= _BV(USIPF);	// clear stop condition flag

			switch(ss_state)
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	01 c0       	rjmp	.+2      	; 0x566 <usi_twi_slave+0xcc>
				case(ss_state_data_processed):
				{
					if(stats_enabled)
						local_frames_count++;

					call_datacallback = 1;
 564:	81 e0       	ldi	r24, 0x01	; 1

					break;
				}
			}

			ss_state = ss_state_before_start;
 566:	10 92 db 00 	sts	0x00DB, r1

			sei();
 56a:	78 94       	sei
		}

		if(call_datacallback)
 56c:	88 23       	and	r24, r24
 56e:	09 f4       	brne	.+2      	; 0x572 <usi_twi_slave+0xd8>
 570:	ae cf       	rjmp	.-164    	; 0x4ce <usi_twi_slave+0x34>
		{
			output_buffer_length	= 0;
 572:	10 92 98 00 	sts	0x0098, r1
			output_buffer_current	= 0;
 576:	10 92 97 00 	sts	0x0097, r1
			data_callback(&input_buffer_length, &input_buffer, &output_buffer_length, &output_buffer);
 57a:	e0 91 dd 00 	lds	r30, 0x00DD
 57e:	f0 91 de 00 	lds	r31, 0x00DE
 582:	29 e9       	ldi	r18, 0x99	; 153
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	48 e9       	ldi	r20, 0x98	; 152
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	6a eb       	ldi	r22, 0xBA	; 186
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	89 eb       	ldi	r24, 0xB9	; 185
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	09 95       	icall
			input_buffer_length		= 0;
 594:	10 92 b9 00 	sts	0x00B9, r1
 598:	9a cf       	rjmp	.-204    	; 0x4ce <usi_twi_slave+0x34>

0000059a <usi_twi_enable_stats>:
	}
}

void usi_twi_enable_stats(uint8_t onoff)
{
	stats_enabled				= onoff;
 59a:	80 93 96 00 	sts	0x0096, r24
	start_conditions_count		= 0;
 59e:	10 92 95 00 	sts	0x0095, r1
 5a2:	10 92 94 00 	sts	0x0094, r1
	stop_conditions_count		= 0;
 5a6:	10 92 93 00 	sts	0x0093, r1
 5aa:	10 92 92 00 	sts	0x0092, r1
	error_conditions_count		= 0;
 5ae:	10 92 91 00 	sts	0x0091, r1
 5b2:	10 92 90 00 	sts	0x0090, r1
	overflow_conditions_count	= 0;
 5b6:	10 92 8f 00 	sts	0x008F, r1
 5ba:	10 92 8e 00 	sts	0x008E, r1
	local_frames_count			= 0;
 5be:	10 92 8d 00 	sts	0x008D, r1
 5c2:	10 92 8c 00 	sts	0x008C, r1
	idle_call_count				= 0;
 5c6:	10 92 8b 00 	sts	0x008B, r1
 5ca:	10 92 8a 00 	sts	0x008A, r1
 5ce:	08 95       	ret

000005d0 <usi_twi_stats_start_conditions>:
}

uint16_t usi_twi_stats_start_conditions(void)
{
	return(start_conditions_count);
}
 5d0:	80 91 94 00 	lds	r24, 0x0094
 5d4:	90 91 95 00 	lds	r25, 0x0095
 5d8:	08 95       	ret

000005da <usi_twi_stats_stop_conditions>:

uint16_t usi_twi_stats_stop_conditions(void)
{
	return(stop_conditions_count);
}
 5da:	80 91 92 00 	lds	r24, 0x0092
 5de:	90 91 93 00 	lds	r25, 0x0093
 5e2:	08 95       	ret

000005e4 <usi_twi_stats_error_conditions>:

uint16_t usi_twi_stats_error_conditions(void)
{
	return(error_conditions_count);
}
 5e4:	80 91 90 00 	lds	r24, 0x0090
 5e8:	90 91 91 00 	lds	r25, 0x0091
 5ec:	08 95       	ret

000005ee <usi_twi_stats_overflow_conditions>:

uint16_t usi_twi_stats_overflow_conditions(void)
{
	return(overflow_conditions_count);
}
 5ee:	80 91 8e 00 	lds	r24, 0x008E
 5f2:	90 91 8f 00 	lds	r25, 0x008F
 5f6:	08 95       	ret

000005f8 <usi_twi_stats_local_frames>:

uint16_t usi_twi_stats_local_frames(void)
{
	return(local_frames_count);
}
 5f8:	80 91 8c 00 	lds	r24, 0x008C
 5fc:	90 91 8d 00 	lds	r25, 0x008D
 600:	08 95       	ret

00000602 <usi_twi_stats_idle_calls>:
 602:	80 91 8a 00 	lds	r24, 0x008A
 606:	90 91 8b 00 	lds	r25, 0x008B
 60a:	08 95       	ret

0000060c <main>:
	/*DDRB |= (1<<i);     //Set PortD Pin0 as an output*/
	/*DDRA |= (1<<i);     //Set PortD Pin0 as an output*/
	/*PORTB |= (1<<i);        //Set PortD Pin0 high to turn on LED*/
	/*PORTA |= (1<<i);        //Set PortD Pin0 high to turn on LED*/
	/*}*/
	DDRB |= (1<<2) | (1<<1);
 60c:	87 b3       	in	r24, 0x17	; 23
 60e:	86 60       	ori	r24, 0x06	; 6
 610:	87 bb       	out	0x17, r24	; 23
	DDRA |= (1<<7);
 612:	d7 9a       	sbi	0x1a, 7	; 26
	PORTB |= (1<<1);
 614:	c1 9a       	sbi	0x18, 1	; 24
	measCur();
 616:	8c dd       	rcall	.-1256   	; 0x130 <measCur>
	measVin();	
 618:	73 dd       	rcall	.-1306   	; 0x100 <measVin>
	// Set PTB0 to 0 to enable power save. 
	/*PORTB &= ~(1<<0);*/
	cwSend("AB1TJ", 5);
 61a:	65 e0       	ldi	r22, 0x05	; 5
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	84 e8       	ldi	r24, 0x84	; 132
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	d1 dd       	rcall	.-1118   	; 0x1c6 <cwSend>

	/*PORTB ^= (1<<2);*/
	//Setup the clock
	TCCR1B |= (1 << WGM12) | 1<<CS11 | 1<<CS10;  //Divide by 64
 624:	8e b5       	in	r24, 0x2e	; 46
 626:	8b 60       	ori	r24, 0x0B	; 11
 628:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 5000;        //Count 15624 cycles for 1 second interrupt
 62a:	88 e8       	ldi	r24, 0x88	; 136
 62c:	93 e1       	ldi	r25, 0x13	; 19
 62e:	9b bd       	out	0x2b, r25	; 43
 630:	8a bd       	out	0x2a, r24	; 42
	/*OCR1A = 15624;        //Count 15624 cycles for 1 second interrupt*/
	TIMSK1 |= 1<<OCIE1A;        //enable timer compare interrupt
 632:	61 9a       	sbi	0x0c, 1	; 12
	sei();            //Enable global interrupts
 634:	78 94       	sei

	usi_twi_slave(0x68, 1, twi_callback, 0);
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	4d e2       	ldi	r20, 0x2D	; 45
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	61 e0       	ldi	r22, 0x01	; 1
 640:	88 e6       	ldi	r24, 0x68	; 104
 642:	2b df       	rcall	.-426    	; 0x49a <usi_twi_slave>

	cwSend("AB1TJ", 5);
 644:	65 e0       	ldi	r22, 0x05	; 5
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	84 e8       	ldi	r24, 0x84	; 132
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	bc dd       	rcall	.-1160   	; 0x1c6 <cwSend>
	for(;;){
		if (*i2cInLen){
 64e:	e0 91 e5 00 	lds	r30, 0x00E5
 652:	f0 91 e6 00 	lds	r31, 0x00E6
 656:	80 81       	ld	r24, Z
 658:	fe cf       	rjmp	.-4      	; 0x656 <main+0x4a>

0000065a <_exit>:
 65a:	f8 94       	cli

0000065c <__stop_program>:
 65c:	ff cf       	rjmp	.-2      	; 0x65c <__stop_program>
