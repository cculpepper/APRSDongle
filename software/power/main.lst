   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 112               	.global	twi_callback
 114               	twi_callback:
 115               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        **** * Hackaday.com AVR Tutorial firmware
   3:main.c        **** * written by: Mike Szczys (@szczys)
   4:main.c        **** * 10/24/2010
   5:main.c        **** *
   6:main.c        **** * ATmega168
   7:main.c        **** * Blinks one LED conneced to PD0
   8:main.c        **** *
   9:main.c        **** * http://hackaday.com/2010/10/25/avr-programming-02-the-hardware/
  10:main.c        **** */
  11:main.c        **** #define __AVR_ATtiny84A__
  12:main.c        **** 
  13:main.c        **** #define F_CPU 8000000
  14:main.c        **** #include <avr/io.h>
  15:main.c        **** #include <avr/interrupt.h>
  16:main.c        **** #include <stdint.h>
  17:main.c        **** #include "usitwislave.h"
  18:main.c        **** 
  19:main.c        **** #include <util/delay.h>
  20:main.c        **** #include "cw.h"
  21:main.c        **** 
  22:main.c        **** 
  23:main.c        **** volatile uint8_t *i2cOutBuf;
  24:main.c        **** volatile const uint8_t *i2cInBuf;
  25:main.c        **** volatile uint8_t *i2cInLen;
  26:main.c        **** volatile uint8_t *i2cOutLen;
  27:main.c        **** char v[2];
  28:main.c        **** char cur[2];
  29:main.c        **** char temp[2];
  30:main.c        **** 
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** void twi_callback(volatile uint8_t *input_buffer_length, 
  34:main.c        **** 		volatile const uint8_t *input_buffer, volatile uint8_t *output_buffer_length, 
  35:main.c        **** 		volatile uint8_t *output_buffer) {
 117               	.LM0:
 118               	.LFBB1:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 123 0000 F901      		movw r30,r18
  36:main.c        **** 	/*PORTB ^= (1<<2);        //Use xor to toggle the LED*/
  37:main.c        **** 	i2cOutLen = output_buffer_length;
 125               	.LM1:
 126 0002 5093 0000 		sts i2cOutLen+1,r21
 127 0006 4093 0000 		sts i2cOutLen,r20
  38:main.c        **** 	i2cOutBuf = output_buffer;
 129               	.LM2:
 130 000a 3093 0000 		sts i2cOutBuf+1,r19
 131 000e 2093 0000 		sts i2cOutBuf,r18
  39:main.c        **** 	i2cInLen = input_buffer_length;
 133               	.LM3:
 134 0012 9093 0000 		sts i2cInLen+1,r25
 135 0016 8093 0000 		sts i2cInLen,r24
  40:main.c        **** 	i2cInBuf = input_buffer;
 137               	.LM4:
 138 001a 7093 0000 		sts i2cInBuf+1,r23
 139 001e 6093 0000 		sts i2cInBuf,r22
  41:main.c        **** 			switch (*i2cInBuf){
 141               	.LM5:
 142 0022 DB01      		movw r26,r22
 143 0024 8C91      		ld r24,X
 144 0026 8330      		cpi r24,lo8(3)
 145 0028 01F0      		breq .L3
 146 002a 8430      		cpi r24,lo8(4)
 147 002c 01F0      		breq .L4
 148 002e 8230      		cpi r24,lo8(2)
 149 0030 01F4      		brne .L1
 150               	.LBB4:
 151               	.LBB5:
  42:main.c        **** 				case (1):
  43:main.c        **** 					{
  44:main.c        **** 						break;
  45:main.c        **** 					}
  46:main.c        **** 				case (2):
  47:main.c        **** 					{
  48:main.c        **** 						// Voltage request. 
  49:main.c        **** 						i2cOutBuf[0] = v[0]++;
 153               	.LM6:
 154 0032 9091 0000 		lds r25,v
 155 0036 21E0      		ldi r18,lo8(1)
 156 0038 290F      		add r18,r25
 157 003a 2093 0000 		sts v,r18
 158 003e 9083      		st Z,r25
  50:main.c        **** 						i2cOutBuf[1] = v[1]++;
 160               	.LM7:
 161 0040 E091 0000 		lds r30,i2cOutBuf
 162 0044 F091 0000 		lds r31,i2cOutBuf+1
 163 0048 9091 0000 		lds r25,v+1
 164 004c 21E0      		ldi r18,lo8(1)
 165 004e 290F      		add r18,r25
 166 0050 2093 0000 		sts v+1,r18
 167 0054 9183      		std Z+1,r25
  51:main.c        **** 						*i2cOutLen = 2;
 169               	.LM8:
 170 0056 E091 0000 		lds r30,i2cOutLen
 171 005a F091 0000 		lds r31,i2cOutLen+1
 172 005e 00C0      		rjmp .L6
 173               	.L3:
 174               	.LBE5:
 175               	.LBE4:
  52:main.c        **** 						break;
  53:main.c        **** 					}
  54:main.c        **** 				case (3):
  55:main.c        **** 					{
  56:main.c        **** 						i2cOutBuf[0] = cur[0];
 177               	.LM9:
 178 0060 8091 0000 		lds r24,cur
 179 0064 8083      		st Z,r24
  57:main.c        **** 						i2cOutBuf[1] = cur[1];
 181               	.LM10:
 182 0066 E091 0000 		lds r30,i2cOutBuf
 183 006a F091 0000 		lds r31,i2cOutBuf+1
 184 006e 8091 0000 		lds r24,cur+1
 185 0072 00C0      		rjmp .L7
 186               	.L4:
  58:main.c        **** 						*i2cOutLen = 2;
  59:main.c        **** 						break;
  60:main.c        **** 					}
  61:main.c        **** 				case (4):
  62:main.c        **** 					{
  63:main.c        **** 						i2cOutBuf[0] = temp[0];
 188               	.LM11:
 189 0074 8091 0000 		lds r24,temp
 190 0078 8083      		st Z,r24
  64:main.c        **** 						i2cOutBuf[1] = temp[1];
 192               	.LM12:
 193 007a E091 0000 		lds r30,i2cOutBuf
 194 007e F091 0000 		lds r31,i2cOutBuf+1
 195 0082 8091 0000 		lds r24,temp+1
 196               	.L7:
 197 0086 8183      		std Z+1,r24
  65:main.c        **** 						*i2cOutLen = 2;
 199               	.LM13:
 200 0088 E091 0000 		lds r30,i2cOutLen
 201 008c F091 0000 		lds r31,i2cOutLen+1
 202 0090 82E0      		ldi r24,lo8(2)
 203               	.L6:
 204 0092 8083      		st Z,r24
 205               	.L1:
 206 0094 0895      		ret
 208               	.Lscope1:
 210               		.stabd	78,0,0
 212               	.global	adcVinInit
 214               	adcVinInit:
 215               		.stabd	46,0,0
  66:main.c        **** 						break;
  67:main.c        **** 					}
  68:main.c        **** 			}
  69:main.c        **** }
  70:main.c        **** 
  71:main.c        **** 
  72:main.c        **** 
  73:main.c        **** 
  74:main.c        **** void adcVinInit(void){
 217               	.LM14:
 218               	.LFBB2:
 219               	/* prologue: function */
 220               	/* frame size = 0 */
 221               	/* stack size = 0 */
 222               	.L__stack_usage = 0
  75:main.c        **** 	// For right now, will set up for single ended, battery voltage measurement. 
  76:main.c        **** 	//
  77:main.c        **** 	PRR &= ~(1 << PRADC);
 224               	.LM15:
 225 0096 0098      		cbi 0,0
  78:main.c        **** 	ADCSRA &= ~(1 << ADEN);
 227               	.LM16:
 228 0098 3798      		cbi 0x6,7
  79:main.c        **** 	ADMUX = 0;
 230               	.LM17:
 231 009a 17B8      		out 0x7,__zero_reg__
  80:main.c        **** 
  81:main.c        **** 	ADCSRB = (1 << ADLAR) ;
 233               	.LM18:
 234 009c 80E1      		ldi r24,lo8(16)
 235 009e 83B9      		out 0x3,r24
  82:main.c        **** 	ADCSRA = (0x6) | (1 << ADEN);
 237               	.LM19:
 238 00a0 86E8      		ldi r24,lo8(-122)
 239 00a2 86B9      		out 0x6,r24
 240 00a4 0895      		ret
 242               	.Lscope2:
 244               		.stabd	78,0,0
 246               	.global	measVin
 248               	measVin:
 249               		.stabd	46,0,0
  83:main.c        **** }
  84:main.c        **** int measVin(void) {
 251               	.LM20:
 252               	.LFBB3:
 253               	/* prologue: function */
 254               	/* frame size = 0 */
 255               	/* stack size = 0 */
 256               	.L__stack_usage = 0
 257               	.L11:
  85:main.c        **** 	int temp;
  86:main.c        **** 	while ( ADCSRA & (1 << ADSC));
 259               	.LM21:
 260 00a6 3699      		sbic 0x6,6
 261 00a8 00C0      		rjmp .L11
  87:main.c        **** 	adcVinInit();
 263               	.LM22:
 264 00aa 00D0      		rcall adcVinInit
  88:main.c        **** 	ADCSRA |= (1 << ADSC);
 266               	.LM23:
 267 00ac 369A      		sbi 0x6,6
 268               	.L12:
  89:main.c        **** 	while ( ADCSRA & (1 << ADSC));
 270               	.LM24:
 271 00ae 3699      		sbic 0x6,6
 272 00b0 00C0      		rjmp .L12
  90:main.c        **** 	/*v[0] = ADCH;*/
  91:main.c        **** 	/*v[1] = ADCL;*/
  92:main.c        **** 	if (v[0] == 0x00){
 274               	.LM25:
 275 00b2 8091 0000 		lds r24,v
 276 00b6 8111      		cpse r24,__zero_reg__
 277 00b8 00C0      		rjmp .L13
 278               	.LBB8:
  93:main.c        **** 		PORTB ^= (1<<2);        //Use xor to toggle the LED
 280               	.LM26:
 281 00ba 98B3      		in r25,0x18
 282 00bc 84E0      		ldi r24,lo8(4)
 283 00be 8927      		eor r24,r25
 284 00c0 88BB      		out 0x18,r24
 285               	.L13:
 286               	.LBE8:
  94:main.c        **** 	}
  95:main.c        **** }
 288               	.LM27:
 289 00c2 0895      		ret
 291               	.Lscope3:
 293               		.stabd	78,0,0
 295               	.global	adcCurInit
 297               	adcCurInit:
 298               		.stabd	46,0,0
  96:main.c        **** 
  97:main.c        **** void adcCurInit(void){
 300               	.LM28:
 301               	.LFBB4:
 302               	/* prologue: function */
 303               	/* frame size = 0 */
 304               	/* stack size = 0 */
 305               	.L__stack_usage = 0
  98:main.c        **** 	// For right now, will set up for single ended, battery voltage measurement. 
  99:main.c        **** 	// PA1 is pos
 100:main.c        **** 	// PA2 is neg
 101:main.c        **** 	//
 102:main.c        **** 	PRR &= ~(1 << PRADC);
 307               	.LM29:
 308 00c4 0098      		cbi 0,0
 103:main.c        **** 	ADCSRA &= ~(1 << ADEN);
 310               	.LM30:
 311 00c6 3798      		cbi 0x6,7
 104:main.c        **** 	ADMUX = 0x0d;
 313               	.LM31:
 314 00c8 8DE0      		ldi r24,lo8(13)
 315 00ca 87B9      		out 0x7,r24
 105:main.c        **** 
 106:main.c        **** 	ADCSRB = (1 << ADLAR) ;
 317               	.LM32:
 318 00cc 80E1      		ldi r24,lo8(16)
 319 00ce 83B9      		out 0x3,r24
 107:main.c        **** 	ADCSRA = (0x6) | (1 << ADEN);
 321               	.LM33:
 322 00d0 86E8      		ldi r24,lo8(-122)
 323 00d2 86B9      		out 0x6,r24
 324 00d4 0895      		ret
 326               	.Lscope4:
 328               		.stabd	78,0,0
 330               	.global	measCur
 332               	measCur:
 333               		.stabd	46,0,0
 108:main.c        **** }
 109:main.c        **** int measCur(void) {
 335               	.LM34:
 336               	.LFBB5:
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 0 */
 340               	.L__stack_usage = 0
 341               	.L18:
 110:main.c        **** 	int temp;
 111:main.c        **** 	while ( ADCSRA & (1 << ADSC));
 343               	.LM35:
 344 00d6 3699      		sbic 0x6,6
 345 00d8 00C0      		rjmp .L18
 112:main.c        **** 	adcCurInit();
 347               	.LM36:
 348 00da 00D0      		rcall adcCurInit
 113:main.c        **** 	ADCSRA |= (1 << ADSC);
 350               	.LM37:
 351 00dc 369A      		sbi 0x6,6
 352               	.L19:
 114:main.c        **** 	while ( ADCSRA & (1 << ADSC));
 354               	.LM38:
 355 00de 3699      		sbic 0x6,6
 356 00e0 00C0      		rjmp .L19
 115:main.c        **** 	cur[0] = ADCH;
 358               	.LM39:
 359 00e2 85B1      		in r24,0x5
 360 00e4 8093 0000 		sts cur,r24
 116:main.c        **** 	cur[1] = ADCL;
 362               	.LM40:
 363 00e8 84B1      		in r24,0x4
 364 00ea 8093 0000 		sts cur+1,r24
 117:main.c        **** }
 366               	.LM41:
 367 00ee 0895      		ret
 369               	.Lscope5:
 371               		.stabd	78,0,0
 372               		.section	.rodata.str1.1,"aMS",@progbits,1
 373               	.LC0:
 374 0000 4142 3154 		.string	"AB1TJ"
 374      4A00 
 375               		.section	.text.startup,"ax",@progbits
 377               	.global	main
 379               	main:
 380               		.stabd	46,0,0
 118:main.c        **** 
 119:main.c        **** 
 120:main.c        **** int main(void)
 121:main.c        **** {
 382               	.LM42:
 383               	.LFBB6:
 384               	/* prologue: function */
 385               	/* frame size = 0 */
 386               	/* stack size = 0 */
 387               	.L__stack_usage = 0
 122:main.c        **** 
 123:main.c        **** 	int i;
 124:main.c        **** 	/*for (i=0;i<7;i++){*/
 125:main.c        **** 	/*DDRB |= (1<<i);     //Set PortD Pin0 as an output*/
 126:main.c        **** 	/*DDRA |= (1<<i);     //Set PortD Pin0 as an output*/
 127:main.c        **** 	/*PORTB |= (1<<i);        //Set PortD Pin0 high to turn on LED*/
 128:main.c        **** 	/*PORTA |= (1<<i);        //Set PortD Pin0 high to turn on LED*/
 129:main.c        **** 	/*}*/
 130:main.c        **** 	DDRB |= (1<<2) | (1<<1);
 389               	.LM43:
 390 0000 87B3      		in r24,0x17
 391 0002 8660      		ori r24,lo8(6)
 392 0004 87BB      		out 0x17,r24
 131:main.c        **** 	DDRA |= (1<<7);
 394               	.LM44:
 395 0006 D79A      		sbi 0x1a,7
 132:main.c        **** 	PORTB |= (1<<1);
 397               	.LM45:
 398 0008 C19A      		sbi 0x18,1
 133:main.c        **** 	measCur();
 400               	.LM46:
 401 000a 00D0      		rcall measCur
 134:main.c        **** 	measVin();	
 403               	.LM47:
 404 000c 00D0      		rcall measVin
 135:main.c        **** 	// Set PTB0 to 0 to enable power save. 
 136:main.c        **** 	/*PORTB &= ~(1<<0);*/
 137:main.c        **** 	cwSend("AB1TJ", 5);
 406               	.LM48:
 407 000e 65E0      		ldi r22,lo8(5)
 408 0010 70E0      		ldi r23,0
 409 0012 80E0      		ldi r24,lo8(.LC0)
 410 0014 90E0      		ldi r25,hi8(.LC0)
 411 0016 00D0      		rcall cwSend
 138:main.c        **** 
 139:main.c        **** 	/*PORTB ^= (1<<2);*/
 140:main.c        **** 	//Setup the clock
 141:main.c        **** 	TCCR1B |= (1 << WGM12) | 1<<CS11 | 1<<CS10;  //Divide by 64
 413               	.LM49:
 414 0018 8EB5      		in r24,0x2e
 415 001a 8B60      		ori r24,lo8(11)
 416 001c 8EBD      		out 0x2e,r24
 142:main.c        **** 	OCR1A = 5000;        //Count 15624 cycles for 1 second interrupt
 418               	.LM50:
 419 001e 88E8      		ldi r24,lo8(-120)
 420 0020 93E1      		ldi r25,lo8(19)
 421 0022 9BBD      		out 0x2a+1,r25
 422 0024 8ABD      		out 0x2a,r24
 143:main.c        **** 	/*OCR1A = 15624;        //Count 15624 cycles for 1 second interrupt*/
 144:main.c        **** 	TIMSK1 |= 1<<OCIE1A;        //enable timer compare interrupt
 424               	.LM51:
 425 0026 619A      		sbi 0xc,1
 145:main.c        **** 	sei();            //Enable global interrupts
 427               	.LM52:
 428               	/* #APP */
 429               	 ;  145 "main.c" 1
 430 0028 7894      		sei
 431               	 ;  0 "" 2
 146:main.c        **** 
 147:main.c        **** 	usi_twi_slave(0x68, 1, twi_callback, 0);
 433               	.LM53:
 434               	/* #NOAPP */
 435 002a 20E0      		ldi r18,0
 436 002c 30E0      		ldi r19,0
 437 002e 40E0      		ldi r20,lo8(gs(twi_callback))
 438 0030 50E0      		ldi r21,hi8(gs(twi_callback))
 439 0032 61E0      		ldi r22,lo8(1)
 440 0034 88E6      		ldi r24,lo8(104)
 441 0036 00D0      		rcall usi_twi_slave
 148:main.c        **** 
 149:main.c        **** 	cwSend("AB1TJ", 5);
 443               	.LM54:
 444 0038 65E0      		ldi r22,lo8(5)
 445 003a 70E0      		ldi r23,0
 446 003c 80E0      		ldi r24,lo8(.LC0)
 447 003e 90E0      		ldi r25,hi8(.LC0)
 448 0040 00D0      		rcall cwSend
 150:main.c        **** 	for(;;){
 151:main.c        **** 		if (*i2cInLen){
 450               	.LM55:
 451 0042 E091 0000 		lds r30,i2cInLen
 452 0046 F091 0000 		lds r31,i2cInLen+1
 453               	.L23:
 454 004a 8081      		ld r24,Z
 455 004c 00C0      		rjmp .L23
 457               	.Lscope6:
 459               		.stabd	78,0,0
 460               		.text
 462               	.global	__vector_6
 464               	__vector_6:
 465               		.stabd	46,0,0
 152:main.c        **** 
 153:main.c        **** 		}
 154:main.c        **** 	}
 155:main.c        **** }
 156:main.c        **** 
 157:main.c        **** ISR (TIM1_COMPA_vect)      //Interrupt Service Routine
 158:main.c        **** {
 467               	.LM56:
 468               	.LFBB7:
 469 00f0 1F92      		push r1
 470 00f2 0F92      		push r0
 471 00f4 0FB6      		in r0,__SREG__
 472 00f6 0F92      		push r0
 473 00f8 1124      		clr __zero_reg__
 474 00fa 2F93      		push r18
 475 00fc 3F93      		push r19
 476 00fe 4F93      		push r20
 477 0100 5F93      		push r21
 478 0102 6F93      		push r22
 479 0104 7F93      		push r23
 480 0106 8F93      		push r24
 481 0108 9F93      		push r25
 482 010a AF93      		push r26
 483 010c BF93      		push r27
 484 010e EF93      		push r30
 485 0110 FF93      		push r31
 486               	/* prologue: Signal */
 487               	/* frame size = 0 */
 488               	/* stack size = 15 */
 489               	.L__stack_usage = 15
 159:main.c        **** 	PORTA ^= (1<<7);        //Use xor to toggle the LED
 491               	.LM57:
 492 0112 8BB3      		in r24,0x1b
 493 0114 8058      		subi r24,lo8(-(-128))
 494 0116 8BBB      		out 0x1b,r24
 160:main.c        **** 	PORTB ^= (1<<2);        //Use xor to toggle the LED
 496               	.LM58:
 497 0118 98B3      		in r25,0x18
 498 011a 84E0      		ldi r24,lo8(4)
 499 011c 8927      		eor r24,r25
 500 011e 88BB      		out 0x18,r24
 161:main.c        **** 	measCur();
 502               	.LM59:
 503 0120 00D0      		rcall measCur
 162:main.c        **** 	measVin();	
 505               	.LM60:
 506 0122 00D0      		rcall measVin
 507               	/* epilogue start */
 163:main.c        **** }
 509               	.LM61:
 510 0124 FF91      		pop r31
 511 0126 EF91      		pop r30
 512 0128 BF91      		pop r27
 513 012a AF91      		pop r26
 514 012c 9F91      		pop r25
 515 012e 8F91      		pop r24
 516 0130 7F91      		pop r23
 517 0132 6F91      		pop r22
 518 0134 5F91      		pop r21
 519 0136 4F91      		pop r20
 520 0138 3F91      		pop r19
 521 013a 2F91      		pop r18
 522 013c 0F90      		pop r0
 523 013e 0FBE      		out __SREG__,r0
 524 0140 0F90      		pop r0
 525 0142 1F90      		pop r1
 526 0144 1895      		reti
 528               	.Lscope7:
 530               		.stabd	78,0,0
 531               		.comm	temp,2,1
 532               		.comm	cur,2,1
 533               		.comm	v,2,1
 534               		.comm	i2cOutLen,2,1
 535               		.comm	i2cInLen,2,1
 536               		.comm	i2cInBuf,2,1
 537               		.comm	i2cOutBuf,2,1
 546               	.Letext0:
 547               		.ident	"GCC: (GNU) 5.2.0"
 548               	.global __do_copy_data
 549               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccrxUc7t.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccrxUc7t.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccrxUc7t.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccrxUc7t.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccrxUc7t.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccrxUc7t.s:114    .text:0000000000000000 twi_callback
                            *COM*:0000000000000002 i2cOutLen
                            *COM*:0000000000000002 i2cOutBuf
                            *COM*:0000000000000002 i2cInLen
                            *COM*:0000000000000002 i2cInBuf
                            *COM*:0000000000000002 v
                            *COM*:0000000000000002 cur
                            *COM*:0000000000000002 temp
     /tmp/ccrxUc7t.s:214    .text:0000000000000096 adcVinInit
     /tmp/ccrxUc7t.s:248    .text:00000000000000a6 measVin
     /tmp/ccrxUc7t.s:297    .text:00000000000000c4 adcCurInit
     /tmp/ccrxUc7t.s:332    .text:00000000000000d6 measCur
     /tmp/ccrxUc7t.s:379    .text.startup:0000000000000000 main
     /tmp/ccrxUc7t.s:464    .text:00000000000000f0 __vector_6

UNDEFINED SYMBOLS
cwSend
usi_twi_slave
__do_copy_data
__do_clear_bss
