   1               		.file	"cw.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 106               	.global	cwTone
 108               	cwTone:
 109               		.stabd	46,0,0
   1:cw.c          **** #include "cw.h"
   2:cw.c          **** #define CLOCKRATE 48000000
   3:cw.c          **** /*#define CWDELAY 1000000000*((1/CWFREQ)*(1/SINUS_LENGTH))*/
   4:cw.c          **** #define DITTIME 100 //Time in milliseconds for a dit
   5:cw.c          **** #define DAHTIME (3 * (DITTIME))
   6:cw.c          **** #define LED1_On() PORTA |= (1<<7)
   7:cw.c          **** #define LED1_Off() PORTA &= ~(1<<7)
   8:cw.c          **** 
   9:cw.c          **** const char CwLetterData[26] = {
  10:cw.c          **** 	 /* 3 bit length, 5 bits of data. Can do everything but symbols.....*/ 
  11:cw.c          **** 	/* Bits are right aligned, 1 is dit, 0 is dah a is 10 */ 
  12:cw.c          **** 	0x50, 
  13:cw.c          **** 	0x8E,
  14:cw.c          **** 	0x8A,
  15:cw.c          **** 	0x6C,
  16:cw.c          **** 	0x30,
  17:cw.c          **** 	0x9A,
  18:cw.c          **** 	0x64,
  19:cw.c          **** 	0x9E,
  20:cw.c          **** 	0x58,
  21:cw.c          **** 	0x90,
  22:cw.c          **** 	0x68,
  23:cw.c          **** 	0x96,
  24:cw.c          **** 	0x40,
  25:cw.c          **** 	0x48,
  26:cw.c          **** 	0x60,
  27:cw.c          **** 	0x92,
  28:cw.c          **** 	0x9A,
  29:cw.c          **** 	0x74,
  30:cw.c          **** 	0x7C,
  31:cw.c          **** 	0x20,
  32:cw.c          **** 	0x78,
  33:cw.c          **** 	0x9C,
  34:cw.c          **** 	0x70,
  35:cw.c          **** 	0x8C,
  36:cw.c          **** 	0x88,
  37:cw.c          **** 	0x86
  38:cw.c          **** };  
  39:cw.c          **** const char CwNumberData[10] = {
  40:cw.c          **** 	0xA0,
  41:cw.c          **** 	0xB0,
  42:cw.c          **** 	0xB8,
  43:cw.c          **** 	0xBC,
  44:cw.c          **** 	0xBE,
  45:cw.c          **** 	0xBF,
  46:cw.c          **** 	0xAF,
  47:cw.c          **** 	0xA7,
  48:cw.c          **** 	0xA3,
  49:cw.c          **** 	0xA1,
  50:cw.c          **** 	};
  51:cw.c          **** 
  52:cw.c          **** 
  53:cw.c          **** void cwTone(char DitOrDah){
 111               	.LM0:
 112               	.LFBB1:
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
  54:cw.c          **** 	LED1_On();		
 118               	.LM1:
 119 0000 DF9A      		sbi 0x1b,7
  55:cw.c          **** 	if (DitOrDah == 0) {
 121               	.LM2:
 122 0002 8111      		cpse r24,__zero_reg__
 123 0004 00C0      		rjmp .L2
 124               	.LBB12:
 125               	.LBB13:
 127               	.Ltext1:
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/avr/include/util/delay.h **** 
 155:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/avr/include/util/delay.h **** 
 158:/usr/avr/include/util/delay.h **** 	#else
 159:/usr/avr/include/util/delay.h **** 		//round up by default
 160:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/avr/include/util/delay.h **** 	#endif
 162:/usr/avr/include/util/delay.h **** 
 163:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 129               	.LM3:
 130 0006 2FE5      		ldi r18,lo8(59999)
 131 0008 8AEE      		ldi r24,hi8(59999)
 132 000a 90E0      		ldi r25,hlo8(59999)
 133 000c 2150      		1: subi r18,1
 134 000e 8040      		sbci r24,0
 135 0010 9040      		sbci r25,0
 136 0012 01F4      		brne 1b
 137 0014 00C0      		rjmp .L4
 138               	.L2:
 139               	.LBE13:
 140               	.LBE12:
 141               	.LBB14:
 142               	.LBB15:
 143 0016 87EA      		ldi r24,lo8(24999)
 144 0018 91E6      		ldi r25,hi8(24999)
 145 001a 0197      		1: sbiw r24,1
 146 001c 01F4      		brne 1b
 147               	.L4:
 148 001e 00C0      		rjmp .
 149 0020 0000      		nop
 150               	.LBE15:
 151               	.LBE14:
 153               	.Ltext2:
  56:cw.c          **** 		/* Then we have a dah, 0 and all. `==*/ 
  57:cw.c          **** 		_delay_ms(DAHTIME);
  58:cw.c          **** 	} else {
  59:cw.c          **** 		_delay_ms(DITTIME);
  60:cw.c          **** 	}
  61:cw.c          **** 	LED1_Off();	
 155               	.LM4:
 156 0022 DF98      		cbi 0x1b,7
 157 0024 0895      		ret
 159               	.Lscope1:
 161               		.stabd	78,0,0
 165               	.global	cwSend
 167               	cwSend:
 168               		.stabd	46,0,0
  62:cw.c          **** }
  63:cw.c          **** char cwSend(char* data, int len){
 170               	.LM5:
 171               	.LFBB2:
 172 0026 AF92      		push r10
 173 0028 BF92      		push r11
 174 002a CF92      		push r12
 175 002c DF92      		push r13
 176 002e EF92      		push r14
 177 0030 FF92      		push r15
 178 0032 0F93      		push r16
 179 0034 1F93      		push r17
 180 0036 CF93      		push r28
 181 0038 DF93      		push r29
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 10 */
 185               	.L__stack_usage = 10
 186 003a 7C01      		movw r14,r24
  64:cw.c          **** 	//sends stuff...
  65:cw.c          **** 	char charLen;
  66:cw.c          **** 	char currChar;
  67:cw.c          **** 	char* cwDataPtr;
  68:cw.c          **** 	char currBit;
  69:cw.c          **** 	
  70:cw.c          **** 	cwDataPtr = data;
  71:cw.c          **** 	while((data+len) > cwDataPtr){
 188               	.LM6:
 189 003c EC01      		movw r28,r24
 190 003e C60F      		add r28,r22
 191 0040 D71F      		adc r29,r23
  72:cw.c          **** 		currChar = *cwDataPtr;
  73:cw.c          **** 		if (currChar >= 'A' && currChar <= 'Z'){
  74:cw.c          **** 			currChar = CwLetterData[currChar - 'A']; /* This sets the current char to the morse binary repre
  75:cw.c          **** 		} else if (currChar >= '0' && currChar <= '9'){
  76:cw.c          **** 			currChar = CwNumberData[currChar - '0'];
  77:cw.c          **** 		} else {
  78:cw.c          **** 			currChar = 0;  /* Because I dont know what to do...*/ 
  79:cw.c          **** 		}
  80:cw.c          **** 
  81:cw.c          **** 		charLen = (currChar >> 5); /* This is the length of the morse code char, in the top 3 bits*/ 
  82:cw.c          **** 		currBit = 0;
  83:cw.c          **** 		while ( charLen > 0 ){
  84:cw.c          **** 			cwTone((currChar & ( 0x80 >> (3+currBit))));
 193               	.LM7:
 194 0042 00E8      		ldi r16,lo8(-128)
 195 0044 10E0      		ldi r17,0
 196               	.L7:
  71:cw.c          **** 		currChar = *cwDataPtr;
 198               	.LM8:
 199 0046 EC16      		cp r14,r28
 200 0048 FD06      		cpc r15,r29
 201 004a 00F4      		brsh .L15
  72:cw.c          **** 		currChar = *cwDataPtr;
 203               	.LM9:
 204 004c D701      		movw r26,r14
 205 004e ED91      		ld r30,X+
 206 0050 7D01      		movw r14,r26
  73:cw.c          **** 			currChar = CwLetterData[currChar - 'A']; /* This sets the current char to the morse binary repre
 208               	.LM10:
 209 0052 8FEB      		ldi r24,lo8(-65)
 210 0054 8E0F      		add r24,r30
 211 0056 8A31      		cpi r24,lo8(26)
 212 0058 00F4      		brsh .L8
  74:cw.c          **** 		} else if (currChar >= '0' && currChar <= '9'){
 214               	.LM11:
 215 005a F0E0      		ldi r31,0
 216 005c E050      		subi r30,lo8(-(CwLetterData-65))
 217 005e F040      		sbci r31,hi8(-(CwLetterData-65))
 218 0060 00C0      		rjmp .L14
 219               	.L8:
  75:cw.c          **** 			currChar = CwNumberData[currChar - '0'];
 221               	.LM12:
 222 0062 80ED      		ldi r24,lo8(-48)
 223 0064 8E0F      		add r24,r30
 224 0066 8A30      		cpi r24,lo8(10)
 225 0068 00F4      		brsh .L13
  76:cw.c          **** 		} else {
 227               	.LM13:
 228 006a F0E0      		ldi r31,0
 229 006c E050      		subi r30,lo8(-(CwNumberData-48))
 230 006e F040      		sbci r31,hi8(-(CwNumberData-48))
 231               	.L14:
 232 0070 D080      		ld r13,Z
 233 0072 00C0      		rjmp .L9
 234               	.L13:
  78:cw.c          **** 		}
 236               	.LM14:
 237 0074 D12C      		mov r13,__zero_reg__
 238               	.L9:
  81:cw.c          **** 		currBit = 0;
 240               	.LM15:
 241 0076 CD2C      		mov r12,r13
 242 0078 C294      		swap r12
 243 007a C694      		lsr r12
 244 007c 87E0      		ldi r24,lo8(7)
 245 007e C822      		and r12,r24
  83:cw.c          **** 			cwTone((currChar & ( 0x80 >> (3+currBit))));
 247               	.LM16:
 248 0080 93E0      		ldi r25,lo8(3)
 249 0082 A92E      		mov r10,r25
 250 0084 B12C      		mov r11,__zero_reg__
 251               	.L10:
 252 0086 CC20      		tst r12
 253 0088 01F0      		breq .L16
 255               	.LM17:
 256 008a C801      		movw r24,r16
 257 008c 0A2C      		mov r0,r10
 258 008e 00C0      		rjmp 2f
 259               		1:
 260 0090 9595      		asr r25
 261 0092 8795      		ror r24
 262               		2:
 263 0094 0A94      		dec r0
 264 0096 02F4      		brpl 1b
 265 0098 8D21      		and r24,r13
 266 009a 00D0      		rcall cwTone
 267               	.LBB16:
 268               	.LBB17:
 270               	.Ltext3:
 272               	.LM18:
 273 009c 87EA      		ldi r24,lo8(24999)
 274 009e 91E6      		ldi r25,hi8(24999)
 275 00a0 0197      		1: sbiw r24,1
 276 00a2 01F4      		brne 1b
 277 00a4 00C0      		rjmp .
 278 00a6 0000      		nop
 279               	.LBE17:
 280               	.LBE16:
 282               	.Ltext4:
  85:cw.c          **** 			/* A little bit crazy, passes to the sender, the current bit. Ands the current morse byte with a
  86:cw.c          **** 			_delay_ms(DITTIME);
  87:cw.c          **** 			charLen--;
 284               	.LM19:
 285 00a8 CA94      		dec r12
 286 00aa 9FEF      		ldi r25,-1
 287 00ac A91A      		sub r10,r25
 288 00ae B90A      		sbc r11,r25
 289 00b0 00C0      		rjmp .L10
 290               	.L16:
 291               	.LBB18:
 292               	.LBB19:
 294               	.Ltext5:
 296               	.LM20:
 297 00b2 AFE5      		ldi r26,lo8(59999)
 298 00b4 BAEE      		ldi r27,hi8(59999)
 299 00b6 20E0      		ldi r18,hlo8(59999)
 300 00b8 A150      		1: subi r26,1
 301 00ba B040      		sbci r27,0
 302 00bc 2040      		sbci r18,0
 303 00be 01F4      		brne 1b
 304 00c0 00C0      		rjmp .
 305 00c2 0000      		nop
 306 00c4 00C0      		rjmp .L7
 307               	.L15:
 308               	.LBE19:
 309               	.LBE18:
 310               	.LBB20:
 311               	.LBB21:
 312 00c6 8FE5      		ldi r24,lo8(59999)
 313 00c8 9AEE      		ldi r25,hi8(59999)
 314 00ca A0E0      		ldi r26,hlo8(59999)
 315 00cc 8150      		1: subi r24,1
 316 00ce 9040      		sbci r25,0
 317 00d0 A040      		sbci r26,0
 318 00d2 01F4      		brne 1b
 319 00d4 00C0      		rjmp .
 320 00d6 0000      		nop
 321               	/* epilogue start */
 322               	.LBE21:
 323               	.LBE20:
 325               	.Ltext6:
  88:cw.c          **** 			currBit ++;
  89:cw.c          **** 		}
  90:cw.c          **** 		cwDataPtr++;
  91:cw.c          **** 		_delay_ms(DAHTIME);
  92:cw.c          **** 
  93:cw.c          **** 
  94:cw.c          **** 
  95:cw.c          **** 	}
  96:cw.c          **** 	_delay_ms(DAHTIME);
  97:cw.c          **** 	
  98:cw.c          **** }
 327               	.LM21:
 328 00d8 DF91      		pop r29
 329 00da CF91      		pop r28
 330 00dc 1F91      		pop r17
 331 00de 0F91      		pop r16
 332 00e0 FF90      		pop r15
 333 00e2 EF90      		pop r14
 334 00e4 DF90      		pop r13
 335 00e6 CF90      		pop r12
 336 00e8 BF90      		pop r11
 337 00ea AF90      		pop r10
 338 00ec 0895      		ret
 343               	.Lscope2:
 345               		.stabd	78,0,0
 346               	.global	CwNumberData
 347               		.section	.rodata
 350               	CwNumberData:
 351 0000 A0        		.byte	-96
 352 0001 B0        		.byte	-80
 353 0002 B8        		.byte	-72
 354 0003 BC        		.byte	-68
 355 0004 BE        		.byte	-66
 356 0005 BF        		.byte	-65
 357 0006 AF        		.byte	-81
 358 0007 A7        		.byte	-89
 359 0008 A3        		.byte	-93
 360 0009 A1        		.byte	-95
 361               	.global	CwLetterData
 364               	CwLetterData:
 365 000a 50        		.byte	80
 366 000b 8E        		.byte	-114
 367 000c 8A        		.byte	-118
 368 000d 6C        		.byte	108
 369 000e 30        		.byte	48
 370 000f 9A        		.byte	-102
 371 0010 64        		.byte	100
 372 0011 9E        		.byte	-98
 373 0012 58        		.byte	88
 374 0013 90        		.byte	-112
 375 0014 68        		.byte	104
 376 0015 96        		.byte	-106
 377 0016 40        		.byte	64
 378 0017 48        		.byte	72
 379 0018 60        		.byte	96
 380 0019 92        		.byte	-110
 381 001a 9A        		.byte	-102
 382 001b 74        		.byte	116
 383 001c 7C        		.byte	124
 384 001d 20        		.byte	32
 385 001e 78        		.byte	120
 386 001f 9C        		.byte	-100
 387 0020 70        		.byte	112
 388 0021 8C        		.byte	-116
 389 0022 88        		.byte	-120
 390 0023 86        		.byte	-122
 393               		.text
 395               	.Letext0:
 396               		.ident	"GCC: (GNU) 4.9.2 20141224 (prerelease)"
 397               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 cw.c
     /tmp/cczZ6KZP.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczZ6KZP.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczZ6KZP.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczZ6KZP.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczZ6KZP.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczZ6KZP.s:108    .text:0000000000000000 cwTone
     /tmp/cczZ6KZP.s:167    .text:0000000000000026 cwSend
     /tmp/cczZ6KZP.s:364    .rodata:000000000000000a CwLetterData
     /tmp/cczZ6KZP.s:350    .rodata:0000000000000000 CwNumberData

UNDEFINED SYMBOLS
__do_copy_data
