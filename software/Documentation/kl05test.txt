=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "LED1"      (component LED)
   - LED1_Init -Performs the LED driver initialization.
   - LED1_Deinit -Deinitializes the driver
   - LED1_On -This turns the LED on.
   - LED1_Off -This turns the LED off.
   - LED1_Neg -This negates/toggles the LED
   - LED1_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED1_Put -Turns the LED on or off.
   - LED1_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "DA1"       (component DAC_LDD)
   - DA1_Init -Initializes the device according to design-time configuration properties. Allocates memory for the device data 
                structure.   If the <Enable in init. code> is set to "yes" then the device is also enabled (see the description 
                of the Enable method).  This method can be called only once. Before the second call of Init the Deinit method 
                must be called first. If DMA service is enabled this method also initializes inherited DMA Transfer component.
   - DA1_SetValue -Sets DAC output voltage according to specified value.  Input data format is specified by <Data mode> 
                property settings. If selected formatting is not native for DAC device which is used then any necessary 
                transformations (e.g. shifting) are done._/Note: This method is available only if Data buffer is disabled./_

Module "TI1"       (component TimerInt_LDD)
   - TI1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TI1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask).
   - TI1_Disable -Disables the component - it stops signal generation and events calling.
   - TI1_SetOperationMode -This method requests to change the component's operation mode. Upon a request to change the 
                operation mode, the component will finish a pending job first and then notify a caller that an operation mode 
                has been changed. When no job is pending (ERR_OK), the component changes an operation mode immediately and 
                notify a caller about this change.
   - TI1_GetDriverState -This method returns the current driver status.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_SetOperationMode -This method requests to change the component's operation mode. Upon a request to change the 
                operation mode, the component will finish a pending job first and then notify a caller that an operation mode 
                has been changed. When no job is pending (ERR_OK), the component changes an operation mode immediately and 
                notify a caller about this change.

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "Cpu"       (component MKL05Z32LC4)
   - Cpu_EnableInt -Enables all maskable interrupts.
   - Cpu_DisableInt -Disables all maskable interrupts.

===================================================================================
